# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_grid')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_grid')
    _grid = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_grid', [dirname(__file__)])
        except ImportError:
            import _grid
            return _grid
        try:
            _mod = imp.load_module('_grid', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _grid = swig_import_helper()
    del swig_import_helper
else:
    import _grid
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _grid.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _grid.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _grid.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _grid.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _grid.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _grid.SwigPyIterator_equal(self, x)

    def copy(self):
        return _grid.SwigPyIterator_copy(self)

    def next(self):
        return _grid.SwigPyIterator_next(self)

    def __next__(self):
        return _grid.SwigPyIterator___next__(self)

    def previous(self):
        return _grid.SwigPyIterator_previous(self)

    def advance(self, n):
        return _grid.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _grid.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _grid.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _grid.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _grid.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _grid.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _grid.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _grid.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _grid.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _grid.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _grid.DoubleVector___bool__(self)

    def __len__(self):
        return _grid.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _grid.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _grid.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _grid.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _grid.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _grid.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _grid.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _grid.DoubleVector_pop(self)

    def append(self, x):
        return _grid.DoubleVector_append(self, x)

    def empty(self):
        return _grid.DoubleVector_empty(self)

    def size(self):
        return _grid.DoubleVector_size(self)

    def swap(self, v):
        return _grid.DoubleVector_swap(self, v)

    def begin(self):
        return _grid.DoubleVector_begin(self)

    def end(self):
        return _grid.DoubleVector_end(self)

    def rbegin(self):
        return _grid.DoubleVector_rbegin(self)

    def rend(self):
        return _grid.DoubleVector_rend(self)

    def clear(self):
        return _grid.DoubleVector_clear(self)

    def get_allocator(self):
        return _grid.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _grid.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _grid.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        this = _grid.new_DoubleVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _grid.DoubleVector_push_back(self, x)

    def front(self):
        return _grid.DoubleVector_front(self)

    def back(self):
        return _grid.DoubleVector_back(self)

    def assign(self, n, x):
        return _grid.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _grid.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _grid.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _grid.DoubleVector_reserve(self, n)

    def capacity(self):
        return _grid.DoubleVector_capacity(self)
    __swig_destroy__ = _grid.delete_DoubleVector
    __del__ = lambda self: None
DoubleVector_swigregister = _grid.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class PairdoubleDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PairdoubleDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PairdoubleDouble, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _grid.new_PairdoubleDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["first"] = _grid.PairdoubleDouble_first_set
    __swig_getmethods__["first"] = _grid.PairdoubleDouble_first_get
    if _newclass:
        first = _swig_property(_grid.PairdoubleDouble_first_get, _grid.PairdoubleDouble_first_set)
    __swig_setmethods__["second"] = _grid.PairdoubleDouble_second_set
    __swig_getmethods__["second"] = _grid.PairdoubleDouble_second_get
    if _newclass:
        second = _swig_property(_grid.PairdoubleDouble_second_get, _grid.PairdoubleDouble_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _grid.delete_PairdoubleDouble
    __del__ = lambda self: None
PairdoubleDouble_swigregister = _grid.PairdoubleDouble_swigregister
PairdoubleDouble_swigregister(PairdoubleDouble)

class subregion(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, subregion, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, subregion, name)
    __repr__ = _swig_repr
    __swig_setmethods__["start"] = _grid.subregion_start_set
    __swig_getmethods__["start"] = _grid.subregion_start_get
    if _newclass:
        start = _swig_property(_grid.subregion_start_get, _grid.subregion_start_set)
    __swig_setmethods__["end"] = _grid.subregion_end_set
    __swig_getmethods__["end"] = _grid.subregion_end_get
    if _newclass:
        end = _swig_property(_grid.subregion_end_get, _grid.subregion_end_set)
    __swig_setmethods__["r"] = _grid.subregion_r_set
    __swig_getmethods__["r"] = _grid.subregion_r_get
    if _newclass:
        r = _swig_property(_grid.subregion_r_get, _grid.subregion_r_set)
    __swig_setmethods__["mincell"] = _grid.subregion_mincell_set
    __swig_getmethods__["mincell"] = _grid.subregion_mincell_get
    if _newclass:
        mincell = _swig_property(_grid.subregion_mincell_get, _grid.subregion_mincell_set)
    __swig_setmethods__["maxcell"] = _grid.subregion_maxcell_set
    __swig_getmethods__["maxcell"] = _grid.subregion_maxcell_get
    if _newclass:
        maxcell = _swig_property(_grid.subregion_maxcell_get, _grid.subregion_maxcell_set)
    __swig_setmethods__["startindex"] = _grid.subregion_startindex_set
    __swig_getmethods__["startindex"] = _grid.subregion_startindex_get
    if _newclass:
        startindex = _swig_property(_grid.subregion_startindex_get, _grid.subregion_startindex_set)
    __swig_setmethods__["endindex"] = _grid.subregion_endindex_set
    __swig_getmethods__["endindex"] = _grid.subregion_endindex_get
    if _newclass:
        endindex = _swig_property(_grid.subregion_endindex_get, _grid.subregion_endindex_set)
    __swig_setmethods__["Ncell"] = _grid.subregion_Ncell_set
    __swig_getmethods__["Ncell"] = _grid.subregion_Ncell_get
    if _newclass:
        Ncell = _swig_property(_grid.subregion_Ncell_get, _grid.subregion_Ncell_set)
    __swig_setmethods__["type"] = _grid.subregion_type_set
    __swig_getmethods__["type"] = _grid.subregion_type_get
    if _newclass:
        type = _swig_property(_grid.subregion_type_get, _grid.subregion_type_set)

    def __init__(self):
        this = _grid.new_subregion()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _grid.delete_subregion
    __del__ = lambda self: None
subregion_swigregister = _grid.subregion_swigregister
subregion_swigregister(subregion)

class CartesianGrid(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CartesianGrid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CartesianGrid, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _grid.new_CartesianGrid()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getsubregion(self, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
        return _grid.CartesianGrid_getsubregion(self, arg2, arg3, arg4, arg5, arg6, arg7, arg8)

    def getsubregion_p(self, arg2, arg3):
        return _grid.CartesianGrid_getsubregion_p(self, arg2, arg3)

    def writetofile(self, arg2):
        return _grid.CartesianGrid_writetofile(self, arg2)

    def nu_grid(self, deltax, deltay, deltaz):
        return _grid.CartesianGrid_nu_grid(self, deltax, deltay, deltaz)

    def loadfromfile(self, arg2):
        return _grid.CartesianGrid_loadfromfile(self, arg2)

    def returndx(self):
        return _grid.CartesianGrid_returndx(self)

    def returndy(self):
        return _grid.CartesianGrid_returndy(self)

    def returndz(self):
        return _grid.CartesianGrid_returndz(self)

    def return_kritikx(self):
        return _grid.CartesianGrid_return_kritikx(self)

    def return_kritiky(self):
        return _grid.CartesianGrid_return_kritiky(self)

    def return_kritikz(self):
        return _grid.CartesianGrid_return_kritikz(self)

    def get_grids_sub_i(self, i, axis):
        return _grid.CartesianGrid_get_grids_sub_i(self, i, axis)

    def get_subregion_index_of_point(self, coor, axis):
        return _grid.CartesianGrid_get_subregion_index_of_point(self, coor, axis)

    def findsubregions(self, meshx, meshy, meshz):
        return _grid.CartesianGrid_findsubregions(self, meshx, meshy, meshz)

    def set_number_of_abc_layers(self, x1, x2, y1, y2, z1, z2):
        return _grid.CartesianGrid_set_number_of_abc_layers(self, x1, x2, y1, y2, z1, z2)

    def customgrid(self, dmin, dmax, index, rmax, type, axis, policy=0):
        return _grid.CartesianGrid_customgrid(self, dmin, dmax, index, rmax, type, axis, policy)

    def reshapegrid(self, delta, index, rmax, type, axis, policy=0):
        return _grid.CartesianGrid_reshapegrid(self, delta, index, rmax, type, axis, policy)

    def sumx(self):
        return _grid.CartesianGrid_sumx(self)

    def sumy(self):
        return _grid.CartesianGrid_sumy(self)

    def sumz(self):
        return _grid.CartesianGrid_sumz(self)

    def get_nof_sub(self, arg2):
        return _grid.CartesianGrid_get_nof_sub(self, arg2)

    def return_subregion_params(self, grid, index):
        return _grid.CartesianGrid_return_subregion_params(self, grid, index)

    def subregionparams(self, arg2, arg3, arg4, arg5, arg6):
        return _grid.CartesianGrid_subregionparams(self, arg2, arg3, arg4, arg5, arg6)

    def ugrid(self, delta, length, parite=0):
        return _grid.CartesianGrid_ugrid(self, delta, length, parite)

    def nugrid(self, delta1, delta2, rmax, length, type, policy=0):
        return _grid.CartesianGrid_nugrid(self, delta1, delta2, rmax, length, type, policy)

    def yaz(self):
        return _grid.CartesianGrid_yaz(self)

    def SetUnit(self, s):
        return _grid.CartesianGrid_SetUnit(self, s)
    __swig_destroy__ = _grid.delete_CartesianGrid
    __del__ = lambda self: None
CartesianGrid_swigregister = _grid.CartesianGrid_swigregister
CartesianGrid_swigregister(CartesianGrid)

# This file is compatible with both classic and new-style classes.


