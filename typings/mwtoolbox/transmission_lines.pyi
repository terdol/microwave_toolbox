"""
This type stub file was generated by pyright.
"""

from .genel import *

co = ...
eta0 = ...
mu0 = ...
eps0 = ...
ellipk = ...
def physical_length(eeff, f, elec_length):
    """
    This function returns physical length in meters.

    Args:
        arg(list): First 3 arguments are inputs.

            1. eeff ( effective relative permittivity  ) ;
            2. f ; frequency
            3. elec_length (radian); angle
    """
    ...

def electrical_length(eeff, f, len):
    """
    This function returns electrical length in radians.

    Args:
        arg(list): First 3 arguments are inputs.

            1. eeff ( effective relative permittivity  ) ;
            2. f ; frequency
            3. length ; length
    """
    ...

def skin_depth(f, sigma, mu=..., er=...):
    """
    This function returns skin depth in meters.
    Ref: https://en.wikipedia.org/wiki/Skin_effect

    Args:
        arg(list): First 3 arguments are inputs.

            1. f ; frequency
            2. sigma ; conductivity
            3. mu ; relative permeability
            4. er ; relative permittivity
    """
    ...

def SentezBisection_1d(fonk, _args, k, target_value, init_value, limits=...):
    """
    This function calculates x such that f(x)=y.
    This function is added because NLOPT version in Sentez function does not work fast.
    This function works faster because it employs the fact that all the fonk functions are monotonic functions,
    so bisection method can be used securely.

    Args:
        fonk(function): function whose parameter will be calculated
        _args(list): initial parameter list of *fonk*
        k(int): Index (0-based) of the parameter to be calculated in parameter list of *fonk*.
        target_value(float): Target value to be achieved.
        init_value(float): initial value of the parameter to calculated.
        limits(list): 2-element list of limits for the parameter to be calculated

    Returns:
        float: The parameter value of *fonk* which results in an output close to target_value.

    """
    ...

def Sentez(fonk, _args, k, target_value=..., init_value=..., limits=...): # -> None:
    r"""Function that is used to calculate the parameter value of a function
    that will give target value. There are 2 versions in this function (SciPy and NLOPT).
    NLOPT is added to avoid SciPy for smaller package size for packed applications.

    Args:
        fonk (function): function to be used at optimization.
        _args (list): function arguments of fonk.
        k (int): list of indices of variables to be calculated by optimization.
        target_value (list, optional): target value of fonk. Defaults to [].
        init_value (list, optional): initial values of variables]. Defaults to [].
        limits (list, optional): constraints on variables. Defaults to [].

    Returns:
        float: Calculated parameter.
    """
    ...

def skindepth_analysis(arg, defaultunits):
    """

    Args:
        arg(list): First 3 arguments are inputs.

            1. Metal Conductivity ; electrical conductivity
            2. Metal Permeability ;
            3. Frequency ; frequency
            4. Skin Depth ;length
            5. Surface Impedance ; impedance
    """
    ...

def Z_qs_thin_microstrip(w, h, er):
    r"""Impedance of microstrip transmission line with infinitely thin metal and ignoring dispersion.
    Reference:  Qucs Technical.pdf, Hammerstad and Jensen (er should be eeff in 11.5 formula )
    0.01% for w/h<1, 0.01% for w/h<1000

    Args:
        w (float): Line width (in m).
        h (float): Thickness of the substrate (in m).
        er (float): Dielectric permittivity of the substrate.

    Returns:
        float: Characteristic impedance.
    """
    ...

def er_eff_qs_thin_microstrip(w, h, er):
    r"""Effective dielectric permittivity of microstrip transmission line with infinitely thin metal and ignoring dispersion.
    Reference:  Hammerstad and Jensen, 0.2% for 0.01<w/h<1000 and er<128

    Args:
        w (float): Line width (in m).
        h (float): Thickness of the substrate (in m).
        er (float): Dielectric permittivity of the substrate.

    Returns:
        float: Effective dielectric permittivity.
    """
    ...

def Z_qs_thick_microstrip(w, h, er, t=...):
    r"""Impedance of microstrip transmission line ignoring dispersion.
    Reference:  Hammerstad and Jensen

    Args:
        w (float): Line width (in m).
        h (float): Thickness of the substrate (in m).
        er (float): Dielectric permittivity of the substrate.
        t (float. optional): Thickness of metal. Default is 0.

    Returns:
        float: Characteristic impedance.
    """
    ...

def er_eff_qs_thick_microstrip(w, h, er, t=...):
    """
    Ref: (Hammerstad and Jensen denenecek), Wheeler,  Qucs Technical, s.150
    """
    ...

def er_eff_disp_thick_microstrip(w, h, t, er, f): # -> float:
    """
    Ref: Kobayashi, %0.6 accuracy, 0.1<w/h<10, 1<er<128, no frequency limit
    """
    ...

def Z_disp_thick_microstrip(w, h, t, er, f):
    ...

def Z_eeff_disp_thick_microstrip(w, h, t, er, f): # -> tuple[Unknown, float | Unknown]:
    """ This function is for convenience only. Returns (Z,eeff) pair to be used at ABCD matrix of TL """
    ...

def average_power_rating_thick_microstrip(w, h, t, er, f, tand, sigma, mu_r, rms_roughness, Kd, dT_allowed):
    """
    Ref: Average power-handling capability of microstrip lines.pdf
    Kd: Thermal conductivity of dielectric (W/mK)
    Ka: Thermal conductivity of air (W/mK)
    dT_allowed: Maximum allowed temperature difference between line and ground
    """
    ...

def dc_current_rating_thick_microstrip(w, h, t, er, f, tand, sigma, mu_r, rms_roughness, Kd, dT_allowed):
    """
    Ref: Average power-handling capability of microstrip lines.pdf
    Kd: Thermal conductivity of dielectric (W/mK)
    Ka: Thermal conductivity of air (W/mK)
    dT_allowed: Maximum allowed temperature difference between line and ground
    """
    ...

def dielectric_loss(eeff, er, f, tand):
    """
    Gives dielectric loss in dB/m. Generic for all types of inhomogeneous transmission lines.
    Ref: Qucs Technical s.155
    """
    ...

def conductor_loss_microstrip(w, h, t, er, sigma, mu_r, rms_roughness, f):
    """
    Microstrip conductor loss as dB/m
    Ref: Qucs technical.pdf, "Conductor losses", Eq. 11.80-11.83
    """
    ...

def cutoff_frequency_for_TE1_mode_microstrip(er, h): # -> float:
    """
    Ref: Transmssion Line Design Handbook, p99
    """
    ...

def transverse_resonance_frequency_microstrip(er, h, w):
    r"""Transverse resonance frequency for microstrip.
    Ref: Microwave Engineering Using Microstrip Circuits, p87

    Args:
        er (float): Relative Dielectric Permittivity.
        h (float): Substrate thickness.
        w (float): Width of trace.

    Returns:
        float: Frequency.
    """
    ...

def freq_limit_for_coupling_to_surface_modes_microstrip(er, h):
    r"""Minimum frequency for surface wave modes to generate.
    Ref: Microwave Engineering Using Microstrip Circuits, p86

    Args:
        er (float): Relative Dielectric Permittivity.
        h (float): Substrate thickness.
    Returns:
        float: Frequency.
    """
    ...

def Z_disp_thick_covered_microstrip(w, h, h2, t, er, f):
    """
    Ref: Lumped elements for RF and Microwave circuits, p438
    """
    ...

def er_eff_disp_thick_covered_microstrip(w, h, h2, t, er, f):
    r"""Effective dielectric permittivity of microstrip transmission line with a metallic cover.
    Reference:  Lumped elements for RF and Microwave circuits, p438

    Args:
        w (float): Line width (in m).
        h (float): Thickness of the substrate (in m).
        h2 (float): Height above the substrate up to the cover (in m).?
        t (float): Thickness of the metal (in m).
        er (float): Dielectric permittivity of the substrate.
        f (float): Frequency (in Hz).

    Returns:
        float: Effective dielectric permittivity.
    """
    ...

def microstrip_synthesis(arg, defaultunits):
    """Synthesis function for microstrip transmission lines.

    Args:
        arg(list): First 13 arguments are inputs.

            1. Line Width ;length
            2. Substrate Thickness ;length
            3. Metal Thickness ;length
            4. Dielectric Permittivity (<font size=+2>&epsilon;<sub>r</sub></font>);
            5. Dielectric Loss Tangent ;
            6. Dielectric Thermal Conductivity ;   thermal conductivity
            7. Metal Conductivity ; electrical conductivity
            8. Metal Permeability ;
            9. Roughness ;length
            10. Frequency ; frequency
            11. Physical Length ;length
            12. Impedance ;   impedance
            13. Electrical Length ;  angle
            14. Max Temp Difference (<sup>o</sup>C) ;
            15. <font size=+2>&epsilon;<sub>eff</sub></font> ;
            16. Conductor Loss ;  loss per length
            17. Dielectric Loss ; loss per length
            18. Skin Depth ;length
            19. Cutoff Frequency for TE1 mode ; frequency
            20. Transverse Resonance Frequency; frequency
            21. Frequency Limit for Coupling to Surface Modes ; frequency
            22. Time Delay ; time
            23. L  per unit length ;
            24. C per unit length ;
            25. Surface Impedance ; impedance
            26. Average Rated Power ; power
            27. Max DC Current ; current
    """
    ...

def microstrip_analysis(arg, defaultunits):
    r"""Analysis function for microstrip transmission lines.

    Args:
        arg(list): First 11 arguments are inputs.

            1. Line Width (w);length
            2. Substrate Thickness (h);length
            3. Metal Thickness (t);length
            4. Dielectric Permittivity (<font size=+2>&epsilon;<sub>r</sub></font>);
            5. Dielectric Loss Tangent ;
            6. Dielectric Thermal Conductivity ;   thermal conductivity
            7. Metal Conductivity ; electrical conductivity
            8. Metal Permeability ;
            9. Roughness ;length
            10. Frequency ; frequency
            11. Physical Length ;length
            12. Impedance ;   impedance
            13. Electrical Length ;  angle
            14. Max Temp Difference (<sup>o</sup>C) ;
            15. <font size=+2>&epsilon;<sub>eff</sub></font> ;
            16. Conductor Loss ;  loss per length
            17. Dielectric Loss ; loss per length
            18. Skin Depth ;length
            19. Cutoff Frequency for TE1 mode ; frequency
            20. Transverse Resonance Frequency; frequency
            21. Frequency Limit for Coupling to Surface Modes ; frequency
            22. Time Delay ; time
            23. L  per unit length ;
            24. C per unit length ;
            25. Surface Impedance ; impedance
            26. Average Rated Power ; power
            27. Max DC Current ; current
    """
    ...

def microstrip_analysis_view(arg, defaultunits): # -> None:
    """
    """
    ...

def C_R_interdigital_capacitor(w, s, h, t, length, N, er, sigma, freq): # -> tuple[Unknown, Unknown]:
    r"""Approximate Capacitance of Interdigital Capacitor.
    Ref: RF and Microwave Coupled-Line Circuits

    Args:
        w (float): Width of fingers
        s (float): Gap between fingers
        h (float): Height of substrate
        t (float): Metal thickness
        length (float): Length of fingers
        N (int): Number of fingers
        er (float): Dielectric permittivity
        sigma (float): Electrical conductivity of metal
        freq (float): Frequency

    Returns:
        float: Capacitance.
    """
    ...

def Z_thick_stripline(w, b, t, er):
    r"""Characteristic impedance of symmetric stripline transmission line.
    Reference:  Transmssion Line Design Handbook, p. 125

    Args:
        w (float): Line width (in m).
        b (float): Thickness of the substrate (in m).
        t (float): Thickness of the metal (in m).
        er (float): Dielectric permittivity of the substrate.

    Returns:
        float: Characteristic impedance.
    """
    ...

def Z_thick_offset_stripline(w, eps_r, h1, h2, t):
    """Characteristic impedance of asymmetric stripline transmission line.
    Ref: Transmssion Line Design Handbook, p. 129

    Args:
        w (float): Line width (in m).
        eps_r (float): Dielectric permittivity of the substrate.
        h1 (float): Thickness of the substrate under the line (in m).
        h2 (float): Thickness of the substrate above the line (in m).
        t (float): Thickness of the metal (in m).

    Returns:
        float: Characteristic impedance.
    """
    ...

def conductor_loss_stripline(w, b, t, er, f, sigma, mu):
    """Calculation of conductor loss of stripline with incremental inductance rule.

    Args:
        w (float): Width of line (in m).
        b (float): Thickness of the substrate (in m).
        t (float): Thickness of the metal trace (in m).
        er (float): Dielectric permittivity.
        f (float): Frequency (in Hz).
        sigma (float): Electrical conductivity of metal trace.
        mu (float): Magnetic permeability of metal trace.

    Returns:
        float: Conductor loss in dB/m.
    """
    ...

def stripline_analysis(arg, defaultunits):
    """Analysis function for stripline transmission lines.

    Args:
        arg(list): First 10 arguments are inputs.

            1. Line Width (w);length
            2. Ground Separation (h);length
            3. Metal Thickness (t);length
            4. Dielectric Permittivity (<font size=+2>&epsilon;<sub>r</sub></font>);
            5. Dielectric Loss Tangent ;
            6. Metal Conductivity ; electrical conductivity
            7. Metal Permeability ;
            8. Roughness ;length
            9. Frequency ; frequency
            10. Physical Length ;length
            11. Impedance ;   impedance
            12. Electrical Length ;   angle
            13. <font size=+2>&epsilon;<sub>eff</sub></font> ;
            14. Conductor Loss ;   loss per length
            15. Dielectric Loss ;   loss per length
    """
    ...

def stripline_analysis_view(arg, defaultunits): # -> None:
    """
    """
    ...

def stripline_synthesis(arg, defaultunits):
    """Synthesis function for stripline transmission line.

    Args:
        arg(list): First 10 arguments are inputs.

            1. Line Width ;length
            2. Ground Separation ;length
            3. Metal Thickness ;length
            4. Dielectric Permittivity (<font size=+2>&epsilon;<sub>r</sub></font>);
            5. Dielectric Loss Tangent ;
            6. Metal Conductivity ; electrical conductivity
            7. Metal Permeability ;
            8. Roughness ;length
            9. Frequency ; frequency
            10. Physical Length ;length
            11. Impedance ;   impedance
            12. Electrical Length ;   angle
            13. <font size=+2>&epsilon;<sub>eff</sub></font> ;
            14. Conductor Loss ;   loss per length
            15. Dielectric Loss ;   loss per length
    """
    ...

def Z_coaxial(er, r, d):
    ...

def Z_coaxial_strip_center(er, w, D):
    ...

def Z_square_coaxial(er, r, d):
    ...

def Z_square_coaxial_square_center(er, r, d):
    ...

def Z_eccentric_coaxial(er, r, d, sh):
    ...

def Z_parallel_wires(er, d1, d2, D):
    ...

def conductor_loss_coaxial(er, r, d, f, sigma, mu):
    r"""Conductor loss of coaxial transmission line.
    Ref: http://www.microwaves101.com/encyclopedia/coax_exact.cfm

    Args:
        er (float): Relative dielectric permittivity
        r (float): Inner radius.
        d (float): Outer radius.
        f (float): Frequency.
        sigma (float): Electrical conductivity.
        mu (float): Relative magnetic permeability.

    Returns:
        float: Conductor loss in dB/m.
    """
    ...

def conductor_loss_eccentric_coaxial(er, r, d, sh, f, sigma, mu):
    r"""Conductor loss of eccentric coaxial transmission line.
    Ref: Transmssion Line Design Handbook, p56, problemli? t=0 olursa ne olacak?

    Args:
        er (float): Relative dielectric permittivity
        r (float): Inner radius.
        d (float): Outer radius.
        sh (float): Offset of inner conductor from center.
        f (float): Frequency.
        sigma (float): Electrical conductivity.
        mu (float): Relative magnetic permeability.

    Returns:
        float: Conductor loss in dB/m.
    """
    ...

def coaxial_line_analysis(arg, defaultunits):
    r"""Analysis function for coaxial transmission line.
    Ref: Transmssion Line Design Handbook, p47, r-inner diameter, d-outer diameter

    Args:
        arg(list): First 9 arguments are inputs.

            1. Inner Radius (r);length
            2. Outer Radius (d);length
            3. Dielectric Permittivity (<font size=+2>&epsilon;<sub>r</sub></font>);
            4. Dielectric Loss Tangent ;
            5. Metal Conductivity ;  electrical conductivity
            6. Metal Permeability ;
            7. Roughness ;length
            8. Frequency ; frequency
            9. Physical Length ;length
            10. Impedance ;  impedance
            11. Electrical Length ; angle
            12. <font size=+2>&epsilon;<sub>eff</sub></font> ;
            13. Conductor Loss ;   loss per length
            14. Dielectric Loss ;  loss per length
            15. Cutoff Frequency for TE11 mode ;  frequency

    """
    ...

def coaxial_line_synthesis(arg, defaultunits):
    r"""Synthesis function for coaxial transmission line.

    Args:
        arg(list): First 9 arguments are inputs.

            1. Inner Radius (r);length
            2. Outer Radius (d);length
            3. Dielectric Permittivity (<font size=+2>&epsilon;<sub>r</sub></font>);
            4. Dielectric Loss Tangent ;
            5. Metal Conductivity ;  electrical conductivity
            6. Metal Permeability ;
            7. Roughness ;length
            8. Frequency ; frequency
            9. Physical Length ;length
            10. Impedance ;  impedance
            11. Electrical Length ; angle
            12. <font size=+2>&epsilon;<sub>eff</sub></font> ;
            13. Conductor Loss ;   loss per length
            14. Dielectric Loss ;  loss per length
            15. Cutoff Frequency for TE11 mode ;  frequency

    Ref: Transmssion Line Design Handbook, p47, r-inner diameter, d-outer diameter
    """
    ...

def coaxial_analysis_view(arg, defaultunits): # -> None:
    """
    """
    ...

def coaxial_strip_center_analysis(arg, defaultunits):
    r"""Analysis function for coaxial transmission line with strip center conductor.

    Args:
        arg(list): First 9 arguments are inputs.

            1. Strip Width (w) ;length
            2. Dielectric Permittivity (<font size=+2>&epsilon;<sub>r</sub></font>);
            3. Outer Diameter (D);length
            4. Dielectric Loss Tangent ;
            5. Metal Conductivity ;  electrical conductivity
            6. Metal Permeability ;
            7. Roughness ;length
            8. Frequency ; frequency
            9. Physical Length ;length
            10. Impedance ;  impedance
            11. Electrical Length ; angle
            12. <font size=+2>&epsilon;<sub>eff</sub></font> ;
            13. Conductor Loss ;   loss per length
            14. Dielectric Loss ;  loss per length
    Ref: Transmssion Line Design Handbook, p47, r-inner diameter, d-outer diameter
    """
    ...

def coaxial_strip_center_analysis_view(arg, defaultunits): # -> None:
    """
    """
    ...

def square_coaxial_circular_center_analysis(arg, defaultunits):
    r"""Analysis function for square coaxial transmission line with circular center conductor.

    Args:
        arg(list): First 9 arguments are inputs.

            1. Inner Radius (r);length
            2. Outer Size (D);length
            3. Dielectric Permittivity (<font size=+2>&epsilon;<sub>r</sub></font>);
            4. Dielectric Loss Tangent ;
            5. Metal Conductivity ;  electrical conductivity
            6. Metal Permeability ;
            7. Roughness ;length
            8. Frequency ; frequency
            9. Physical Length ;length
            10. Impedance ;  impedance
            11. Electrical Length ; angle
            12. <font size=+2>&epsilon;<sub>eff</sub></font> ;
            13. Conductor Loss ;   loss per length
            14. Dielectric Loss ;  loss per length
            Ref: Transmssion Line Design Handbook, p47, r-inner diameter, d-outer diameter
    """
    ...

def rectangular_coaxial_line_analysis(arg, defaultunits):
    """Analysis function for rectangular coaxial transmission line.

    Args:
        arg(list): First 11 arguments are inputs.

            1. Line Width (w) ;length
            2. Line Thickness (t) ;length
            3. Box Width (a) ;length
            4. Box Height (b) ;length
            5. Dielectric Permittivity (<font size=+2>&epsilon;<sub>r</sub></font>);
            6. Dielectric Loss Tangent ;
            7. Metal Conductivity ;  electrical conductivity
            8. Metal Permeability ;
            9. Roughness ;length
            10. Frequency ; frequency
            11. Physical Length ;length
            12. Impedance ;  impedance
            13. Electrical Length ; angle
            14. <font size=+2>&epsilon;<sub>eff</sub></font> ;
            15. Conductor Loss ;   loss per length
            16. Dielectric Loss ;  loss per length
            Ref: Transmssion Line Design Handbook, p60
    """
    ...

def rectangular_coaxial_line_synthesis(arg, defaultunits):
    """Synthesis function for rectangular coaxial transmission line.

    Args:
        arg(list): First 11 arguments are inputs.

            1. Line Width (w) ;length
            2. Line Thickness (t) ;length
            3. Box Width (a) ;length
            4. Box Height (b) ;length
            5. Dielectric Permittivity (<font size=+2>&epsilon;<sub>r</sub></font>);
            6. Dielectric Loss Tangent ;
            7. Metal Conductivity ;  electrical conductivity
            8. Metal Permeability ;
            9. Roughness ;length
            10. Frequency ; frequency
            11. Physical Length ;length
            12. Impedance ;  impedance
            13. Electrical Length ; angle
            14. <font size=+2>&epsilon;<sub>eff</sub></font> ;
            15. Conductor Loss ;   loss per length
            16. Dielectric Loss ;  loss per length
            Ref: Transmssion Line Design Handbook, p60
    """
    ...

def square_coaxial_line_square_center_analysis(arg, defaultunits):
    """Analysis function for square coaxial transmission line with square inner conductor.

    Args:
        arg(list): First 9 arguments are inputs.

            1. Dielectric Permittivity (<font size=+2>&epsilon;<sub>r</sub></font>);
            2. Inner Size (d) ;length
            3. Outer Size (D) ;length
            4. Dielectric Loss Tangent ;
            5. Metal Conductivity ;  electrical conductivity
            6. Metal Permeability ;
            7. Roughness ;length
            8. Frequency ; frequency
            9. Physical Length ;length
            10. Impedance ;  impedance
            11. Electrical Length ; angle
            12. <font size=+2>&epsilon;<sub>eff</sub></font> ;
            13. Conductor Loss ;   loss per length
            14. Dielectric Loss ;  loss per length
            Ref: Transmssion Line Design Handbook, p47, r-inner diameter, d-outer diameter
    """
    ...

def square_coaxial_line_square_center_synthesis(arg, defaultunits):
    """Synthesis function for square coaxial transmission line with square inner conductor.

    Args:
        arg(list): First 9 arguments are inputs.

            1. Dielectric Permittivity (<font size=+2>&epsilon;<sub>r</sub></font>);
            2. Inner Size ;length
            3. Outer Size ;length
            4. Dielectric Loss Tangent ;
            5. Metal Conductivity ;  electrical conductivity
            6. Metal Permeability ;
            7. Roughness ;length
            8. Frequency ; frequency
            9. Physical Length ;length
            10. Impedance ;  impedance
            11. Electrical Length ; angle
            12. <font size=+2>&epsilon;<sub>eff</sub></font> ;
            13. Conductor Loss ;   loss per length
            14. Dielectric Loss ;  loss per length
            Ref: Transmssion Line Design Handbook, p47, r-inner diameter, d-outer diameter
    """
    ...

def eccentric_coaxial_analysis(arg, defaultunits):
    """Analysis function for eccentric coaxial transmission line.

    Args:
        arg(list): First 10 arguments are inputs.

            1. Dielectric Permittivity (<font size=+2>&epsilon;<sub>r</sub></font>) ;
            2. Inner Radius (r) ;length
            3. Outer Radius (d) ;length
            4. Shift From Center (s) ;length
            5. Dielectric Loss Tangent ;
            6. Metal Conductivity ;  electrical conductivity
            7. Metal Permeability ;
            8. Roughness ;length
            9. Frequency ; frequency
            10. Physical Length ;length
            11. Impedance ;  impedance
            12. Electrical Length ; angle
            13. <font size=+2>&epsilon;<sub>eff</sub></font> ;
            14. Conductor Loss ;   loss per length
            15. Dielectric Loss ;  loss per length
            Ref: Transmssion Line Design Handbook, p56, r-inner diameter, d-outer diameter
    """
    ...

def parallel_wires_analysis(arg, defaultunits):
    """Analysis function for parallel wires transmission line.

    Args:
        arg(list): First 10 arguments are inputs.

            1. Dielectric Permittivity (<font size=+2>&epsilon;<sub>r</sub></font>);
            2. First Diameter (<font size=+2>d<sub>1</sub></font>) ;length
            3. Second Diameter (<font size=+2>d<sub>2</sub></font>) ;length
            4. Center to Center Spacing (D) ;length
            5. Dielectric Loss Tangent ;
            6. Metal Conductivity ;  electrical conductivity
            7. Metal Permeability ;
            8. Roughness ;length
            9. Frequency ; frequency
            10. Physical Length ;length
            11. Impedance ;  impedance
            12. Electrical Length ; angle
            13. <font size=+2>&epsilon;<sub>eff</sub></font> ;
            14. Conductor Loss ;   loss per length
            15. Dielectric Loss ;  loss per length
            Ref: Transmssion Line Design Handbook, p67
    """
    ...

def Z_rectangular_coaxial(w, b, t, a, er):
    """
    Ref: Transmission line design handbook, p60
    """
    ...

def Z_partial_coaxial(er, r, d):
    ...

def er_eff_partial_coaxial(er, r, d):
    ...

def conductor_loss_partial_coaxial(er, r, d, f): # -> None:
    ...

def Z_eeff_suspended_stripline_0(w, t, h, b, er, freq): # -> tuple[Unknown, Unknown]:
    ...

def Z_eeff_inverted_suspended_stripline_0(w, t, h, b, er, freq): # -> tuple[Unknown, Unknown]:
    ...

def Z_eeff_suspended_microstripline(w, t, h, hl, er, freq): # -> tuple[Unknown, Unknown]:
    ...

def Z_eeff_inverted_suspended_stripline(w, t, h, hu, hl, er, freq): # -> tuple[Unknown, Unknown]:
    ...

def Z_eeff_suspended_stripline_eski(w, t, a, b, er, freq): # -> tuple[Unknown, Unknown]:
    ...

def covered_suspended_microstripline_analysis(arg, defaultunits):
    r"""Analysis function for the covered suspended microstrip transmission line.

    Args:
        arg(list): First 12 arguments are inputs.

            1. Line Width (w) ;length
            2. Metal Thickness (t) ;length
            3. Substrate Thickness (h) ;length
            4. Upper Cavity Height (hu) ;length
            5. Lower Cavity Height (hl) ;length
            6. Dielectric Permittivity (<font size=+2>&epsilon;<sub>r</sub></font>);
            7. Dielectric Loss Tangent ;
            8. Metal Conductivity ;  electrical conductivity
            9. Metal Permeability ;
            10. Roughness ;length
            11. Frequency ; frequency
            12. Physical Length ;length
            13. Impedance ;   impedance
            14. Electrical Length ;  angle
            15. <font size=+2>&epsilon;<sub>eff</sub></font> ;
            16. Conductor Loss ;   loss per length
            17. Dielectric Loss ;   loss per length
            Ref: Model for Shielded Suspended Substrate Microstrip Line.pdf, Level 1
            Over the range 0.5<=w/hl<=10, 0.05<=h/hl<=1.5, and er<=20 the accuracy
            of these model equations (in reproducing the exact theoretical data) is generally
            better than 0.6 percent.
            Static Model. Does not use frequency.
            Does not use thickness.
    """
    ...

def covered_suspended_microstripline_synthesis(arg, defaultunits):
    """Synthesis function for the covered suspended microstrip transmission line.

    Args:
        arg(list): First 11 arguments are inputs.

            1. Line Width (w) ;length
            2. Metal Thickness (t) ;length
            3. Substrate Thickness (h) ;length
            4. Upper Cavity Heigh (hu) ;length
            5. Lower Cavity Height (hl) ;length
            6. Dielectric Permittivity (<font size=+2>&epsilon;<sub>r</sub></font>);
            7. Dielectric Loss Tangent ;
            8. Metal Conductivity ;  electrical conductivity
            9. Metal Permeability ;
            10. Roughness ;length
            11. Frequency ; frequency
            12. Physical Length ;length
            13. Impedance ;   impedance
            14. Electrical Length ;  angle
            15. <font size=+2>&epsilon;<sub>eff</sub></font> ;
            16. Conductor Loss ;   loss per length
            17. Dielectric Loss ;   loss per length
            Ref: Transmssion Line Design Handbook, p141, a-dielectric height, b-spacing height, t-metal thickness, w-metal width
            Dispersion characteristics are valid for er=12.9 and frequency >20GHz
    """
    ...

def suspended_microstripline_analysis(arg, defaultunits):
    """Analysis function for the suspended microstrip transmission line.

    Args:
        arg(list): First 11 arguments are inputs.

            1. Line Width (w) ;length
            2. Metal Thickness (t) ;length
            3. Substrate Thickness (a) ;length
            4. Spacing Height (b) ;length
            5. Dielectric Permittivity (<font size=+2>&epsilon;<sub>r</sub></font>);
            6. Dielectric Loss Tangent ;
            7. Metal Conductivity ;  electrical conductivity
            8. Metal Permeability ;
            9. Roughness ;length
            10. Frequency ; frequency
            11. Physical Length ;length
            12. Impedance ;   impedance
            13. Electrical Length ;  angle
            14. <font size=+2>&epsilon;<sub>eff</sub></font> ;
            15. Conductor Loss ;   loss per length
            16. Dielectric Loss ;   loss per length
            Ref: Model for Shielded Suspended Substrate Microstrip Line.pdf, Level 1
            Over the range 0.5<=w/hl<=10, 0.05<=h/hl<=1.5, and er<=20 the accuracy
            of these model equations (in reproducing the exact theoretical data) is generally
            better than 0.6 percent.
            Static Model. Does not use frequency.
            Does not use thickness.
    """
    ...

def suspended_microstripline_synthesis(arg, defaultunits):
    """Synthesis function for the suspended microstrip transmission line.

    Args:
        arg(list): First 11 arguments are inputs.

            1. Line Width (w) ;length
            2. Metal Thickness (t) ;length
            3. Substrate Thickness (a) ;length
            4. Spacing Height (b) ;length
            5. Dielectric Permittivity (<font size=+2>&epsilon;<sub>r</sub></font>);
            6. Dielectric Loss Tangent ;
            7. Metal Conductivity ;  electrical conductivity
            8. Metal Permeability ;
            9. Roughness ;length
            10. Frequency ; frequency
            11. Physical Length ;length
            12. Impedance ;   impedance
            13. Electrical Length ;  angle
            14. <font size=+2>&epsilon;<sub>eff</sub></font> ;
            15. Conductor Loss ;   loss per length
            16. Dielectric Loss ;   loss per length
            Ref: Transmssion Line Design Handbook, p141, a-dielectric height, b-spacing height, t-metal thickness, w-metal width
            Dispersion characteristics are valid for er=12.9 and frequency >20GHz
    """
    ...

def Z_eeff_shielded_suspended_stripline(w, h, b, a, er): # -> tuple[Unknown, Unknown]:
    ...

def shielded_suspended_stripline_analysis(arg, defaultunits):
    r"""Analysis function for the shielded suspended stripline transmission line.

    Args:
        arg(list): First 11 arguments are inputs.

            1. Line Width (w);length
            2. Substrate Thickness (h);length
            3. Total Height (b);length
            4. Box Width (a);length
            5. Dielectric Permittivity (<font size=+2>&epsilon;<sub>r</sub></font>);
            6. Dielectric Loss Tangent ;
            7. Metal Conductivity ;  electrical conductivity
            8. Metal Permeability ;
            9. Roughness ;length
            10. Frequency ; frequency
            11. Physical Length ;length
            12. Impedance ;   impedance
            13. Electrical Length ;   angle
            14. <font size=+2>&epsilon;<sub>eff</sub></font> ;
            15. Conductor Loss ;   loss per length
            16. Dielectric Loss ;  loss per length
            Ref: Transmssion Line Design Handbook, p141
            Analysis Equations for Shielded Suspended Substrate Microstrip Line and Broadside-Coupled Stripline.pdf
            Valid for 1 < a/b < 2.5, 1 < er < 4, 0.1 < h/b < 0.5
    """
    ...

def shielded_suspended_stripline_synthesis(arg, defaultunits):
    """Synthesis function for the shielded suspended stripline transmission line.

    Args:
        arg(list): First 11 arguments are inputs.

            1. Line Width (w);length
            2. Substrate Thickness (h);length
            3. Total Height (b);length
            4. Box Width (a);length
            5. Dielectric Permittivity (<font size=+2>&epsilon;<sub>r</sub></font>);
            6. Dielectric Loss Tangent ;
            7. Metal Conductivity ;  electrical conductivity
            8. Metal Permeability ;
            9. Roughness ;length
            10. Frequency ; frequency
            11. Physical Length ;length
            12. Impedance ;   impedance
            13. Electrical Length ;   angle
            14. <font size=+2>&epsilon;<sub>eff</sub></font> ;
            15. Conductor Loss ;   loss per length
            16. Dielectric Loss ;  loss per length
            Ref: Transmssion Line Design Handbook, p141
            Analysis Equations for Shielded Suspended Substrate Microstrip Line and Broadside-Coupled Stripline.pdf
            Valid for 1 < a/b < 2.5, 1 < er < 4, 0.1 < h/b < 0.5
    """
    ...

def Z_eeff_grounded_cpw(w, er, s, h): # -> tuple[Unknown, Unknown]:
    """Coplanar waveguide circuits, components and systems s89
    Transmission Line Design Handbook s79
    """
    ...

def Z_eeff_grounded_cpw_thick(w, th, er, s, h): # -> tuple[Any, Unknown]:
    """Coplanar waveguide circuits, components and systems s89
    Transmission Line Design Handbook s79
	For thickness correction Reference: "CPWG impedance formula" document
    """
    ...

def Z_eeff_cpw(w, er, s, h, t): # -> tuple[Unknown, Unknown]:
    """ Transmission Line Design Handbook s73"""
    ...

def grounded_cpw_analysis(arg, defaultunits):
    r"""Analysis function for the grounded coplanar waveguide transmission line.

    Args:
        arg(list): First 11 arguments are inputs.

            1. Line Width (w);length
            2. Line Spacing (s);length
            3. Metal Thickness (th);length
            4. Dielectric Permittivity (<font size=+2>&epsilon;<sub>r</sub></font>);
            5. Substrate Thickness (h);length
            6. Dielectric Loss Tangent ;
            7. Metal Conductivity ;  electrical conductivity
            8. Metal Permeability ;
            9. Roughness ;length
            10. Frequency ; frequency
            11. Physical Length ;length
            12. Impedance ;   impedance
            13. Electrical Length ; angle
            14. <font size=+2>&epsilon;<sub>eff</sub></font> ;
            15. Conductor Loss ;   loss per length
            16. Dielectric Loss ;  loss per length
            Ref: Coplanar waveguide circuits, components and systems s89
    """
    ...

def grounded_cpw_synthesis(arg, defaultunits):
    r"""Synthesis function for the grounded coplanar waveguide transmission line.

    Args:
        arg(list): First 10 arguments are inputs.

            1. Line Width (w);length
            2. Line Spacing (s);length
            3. Dielectric Permittivity (<font size=+2>&epsilon;<sub>r</sub></font>);
            4. Substrate Thickness (h);length
            5. Dielectric Loss Tangent ;
            6. Metal Conductivity ;  electrical conductivity
            7. Metal Permeability ;
            8. Roughness ;length
            9. Frequency ; frequency
            10. Physical Length ;length
            11. Impedance ;   impedance
            12. Electrical Length ; angle
            13. <font size=+2>&epsilon;<sub>eff</sub></font> ;
            14. Conductor Loss ;   loss per length
            15. Dielectric Loss ;  loss per length
            Ref: Coplanar waveguide circuits, components and systems s89
    """
    ...

def Z_eeff_covered_grounded_cpw(w, s, h, er, h1): # -> tuple[Unknown, Unknown]:
    """ Coplanar waveguide circuits, components and systems s89"""
    ...

def covered_grounded_coplanar_waveguide_analysis(arg, defaultunits):
    r"""Analysis function for the covered grounded coplanar waveguide transmission line.

    Args:
        arg(list): First 11 arguments are inputs.

            1. Line Width (w);length
            2. Line Spacing (s);length
            3. Substrate Thickness (h);length
            4. Dielectric Permittivity (<font size=+2>&epsilon;<sub>r</sub></font>);
            5. Cover Height (b);length
            6. Dielectric Loss Tangent ;
            7. Metal Conductivity ;  electrical conductivity
            8. Metal Permeability ;
            9. Roughness ;length
            10. Frequency ; frequency
            11. Physical Length ;length
            11. Impedance ;   impedance
            12. Electrical Length ;  angle
            13. <font size=+2>&epsilon;<sub>eff</sub></font> ;
            14. Conductor Loss ; loss per length
            15. Dielectric Loss ;   loss per length
            Ref: Coplanar waveguide circuits, components and systems s89
    """
    ...

def covered_grounded_coplanar_waveguide_synthesis(arg, defaultunits):
    r"""Synthesis function for the covered grounded coplanar waveguide transmission line.

    Args:
        arg(list): First 11 arguments are inputs.

            1. Line Width (w);length
            2. Line Spacing (s);length
            3. Substrate Thickness (h);length
            4. Dielectric Permittivity (<font size=+2>&epsilon;<sub>r</sub></font>);
            5. Cover Height (b);length
            6. Dielectric Loss Tangent ;
            7. Metal Conductivity ;  electrical conductivity
            8. Metal Permeability ;
            9. Roughness ;length
            10. Frequency ; frequency
            11. Physical Length ;length
            12. Impedance ;   impedance
            13. Electrical Length ;  angle
            14. <font size=+2>&epsilon;<sub>eff</sub></font> ;
            15. Conductor Loss ; loss per length
            16. Dielectric Loss ;   loss per length
            Ref: Coplanar waveguide circuits, components and systems s89
    """
    ...

def Z_eeff_laterally_covered_grounded_cpw(w, s, h, er, h1): # -> None:
    """Coplanar waveguide circuits, components and systems s89"""
    ...

def edge_coupled_microstrip_analysis(arg, defaultunits):
    r"""Analysis function for the edge coupled microstrip transmission line.

    Args:
        arg(list): First 11 arguments are inputs.

            1. Line Width (w) ;length
            2. Line Gap (s) ;length
            3. Metal Thickness (t) ;length
            4. Substrate Thickness (h) ;length
            5. Dielectric Permittivity (<font size=+2>&epsilon;<sub>r</sub></font>);
            6. Dielectric Loss Tangent ;
            7. Metal Conductivity ;  electrical conductivity
            8. Metal Permeability ;
            9. Roughness ;length
            10. Frequency ; frequency
            11. Physical Length ;length
            12. Impedance (even);   impedance
            13. Impedance (odd);   impedance
            14. Electrical Length (even) ;   angle
            15. Electrical Length (odd) ;  angle
            16. <font size=+2>&epsilon;<sub>eff</sub></font> (even);
            17. <font size=+2>&epsilon;<sub>eff</sub></font> (odd);
            18. Conductor Loss (even) ;  loss per length
            19. Conductor Loss (odd) ;  loss per length
            20. Dielectric Loss (even) ; loss per length
            21. Dielectric Loss (odd) ; loss per length
            22. Maximum Coupling ;
            23. Matched Impedance ;
            Ref: Transmssion Line Design Handbook, p199, with errata sheet
    """
    ...

def edge_coupled_microstrip_analysis_view(arg, defaultunits): # -> None:
    """
    """
    ...

def edge_coupled_microstrip_synthesis(arg, defaultunits):
    r"""Synthesis function for the edge coupled microstrip transmission line.

    Args:
        arg(list): First 11 arguments are inputs.

            1. Line Width (w) ;length
            2. Line Gap (s) ;length
            3. Metal Thickness (t) ;length
            4. Substrate Thickness (h) ;length
            5. Dielectric Permittivity (<font size=+2>&epsilon;<sub>r</sub></font>);
            6. Dielectric Loss Tangent ;
            7. Metal Conductivity ;  electrical conductivity
            8. Metal Permeability ;
            9. Roughness ;length
            10. Frequency ; frequency
            11. Physical Length ;length
            12. Impedance (even);   impedance
            13. Impedance (odd);   impedance
            14. Electrical Length (even) ;   angle
            15. Electrical Length (odd) ;  angle
            16. <font size=+2>&epsilon;<sub>eff</sub></font> (even);
            17. <font size=+2>&epsilon;<sub>eff</sub></font> (odd);
            18. Conductor Loss (even) ;  loss per length
            19. Conductor Loss (odd) ;  loss per length
            20. Dielectric Loss (even) ; loss per length
            21. Dielectric Loss (odd) ; loss per length
            22. Maximum Coupling ;
            Ref: Transmssion Line Design Handbook, p199, with errata sheet
    """
    ...

def Z_eeff_edge_coupled_microstrip(w, er, t, h, s, f): # -> tuple[Unknown, Unknown, Unknown, Unknown]:
    """
    Transmssion Line Design Handbook, p199, with errata sheet
    """
    ...

def Z_edge_coupled_thin_symmetric_stripline(w, b, s, er): # -> tuple[Unknown, Unknown]:
    """
    b:  ground spacing
    w:  line width
    s:  line spacing
    er: permittivity
    """
    ...

def Z_edge_coupled_thick_symmetric_stripline(w, b, s, er, t): # -> tuple[Unknown, Unknown]:
    """
    b:  ground spacing
    w:  line width
    s:  line spacing
    er: permittivity
    t:  thickness
    Referans: Shielded Coupled-Strip Transmission Line.pdf
    """
    ...

def edge_coupled_stripline_analysis(arg, defaultunits):
    """

    Args:
        arg(list): First 14 arguments are inputs.

            1. Line Width (w) ;length
            2. Line Spacing (s) ;length
            3. Metal Thickness ;length
            4. Ground Spacing (b) ;length
            5. Dielectric Permittivity (<font size=+2>&epsilon;<sub>r</sub></font>) ;
            6. Dielectric Loss Tangent ;
            7. Metal Conductivity ;  electrical conductivity
            8. Metal Permeability ;
            9. Roughness ;length
            10. Frequency ; frequency
            11. Physical Length ;length
            12. Impedance (even);   impedance
            13. Impedance (odd);   impedance
            14. Electrical Length ;   angle
            15. <font size=+2>&epsilon;<sub>eff</sub></font> ;
            16. Conductor Loss (Even Mode) ;  loss per length
            17. Conductor Loss (Odd Mode) ;  loss per length
            18. Dielectric Loss ; loss per length
            19. Maximum Coupling ;
            Ref: Transmssion Line Design Handbook, p233, with errata sheet
    """
    ...

def edge_coupled_stripline_analysis_view(arg, defaultunits): # -> None:
    """
    """
    ...

def edge_coupled_stripline_synthesis(arg, defaultunits):
    """

    Args:
        arg(list): First 14 arguments are inputs.

            1. Line Width (w) ;length
            2. Dielectric Permittivity (<font size=+2>&epsilon;<sub>r</sub></font>) ;
            3. Metal Thickness ;length
            4. Ground Spacing (b) ;length
            5. Line Spacing (s) ;length
            6. Dielectric Loss Tangent ;
            7. Metal Conductivity ;  electrical conductivity
            8. Metal Permeability ;
            9. Roughness ;length
            10. Frequency ; frequency
            11. Physical Length ;length
            12. Impedance (even);   impedance
            13. Impedance (odd);   impedance
            14. Electrical Length ;   angle
            15. <font size=+2>&epsilon;<sub>eff</sub></font> ;
            16. Conductor Loss (Even Mode) ;  loss per length
            17. Conductor Loss (Odd Mode) ;  loss per length
            18. Dielectric Loss ; loss per length
            19. Maximum Coupling ;
            Ref: Transmssion Line Design Handbook, p233, with errata sheet
    """
    ...

def Z_shielded_stripline(w, b, t, g, er):
    """Transmssion Line Design Handbook, p136, g-yanduvarla hat arasi bosluk,
    b-toplam yukseklik
    """
    ...

def conductor_loss_shielded_stripline(w, b, t, g, er, f, sigma, mu):
    """Incremental Inductance Rule"""
    ...

def symmetrical_shielded_stripline_analysis(arg, defaultunits):
    """Problemli.

    Args:
        arg(list): First 11 arguments are inputs.

            1. Line Width (w) ;length
            2. Ground Spacing (b);length
            3. Metal Thickness (t) ;length
            4. spacing between lateral wall and line (g) ;length
            5. Dielectric Permittivity (<font size=+2>&epsilon;<sub>r</sub></font>);
            6. Dielectric Loss Tangent ;
            7. Metal Conductivity ;  electrical conductivity
            8. Metal Permeability ;
            9. Roughness ;length
            10. Frequency ; frequency
            11. Physical Length ;length
            12. Impedance ;   impedance
            13. Electrical Length ;   angle
            14. <font size=+2>&epsilon;<sub>eff</sub></font> ;
            15. Conductor Loss ;   loss per length
            16. Dielectric Loss ;  loss per length
            Ref: Transmssion Line Design Handbook, p136, g-yanduvarla hat arasi bosluk, b-toplam yukseklik, g<2b olmali
    """
    ...

def symmetrical_shielded_stripline_synthesis(arg, defaultunits):
    """

    Args:
        arg(list): First 11 arguments are inputs.

            1. Line Width (w) ;length
            2. Ground Spacing (b);length
            3. Metal Thickness (t) ;length
            4. spacing between lateral wall and line (g) ;length
            5. Dielectric Permittivity (<font size=+2>&epsilon;<sub>r</sub></font>);
            6. Dielectric Loss Tangent ;
            7. Metal Conductivity ;  electrical conductivity
            8. Metal Permeability ;
            9. Roughness ;length
            10. Frequency ; frequency
            11. Physical Length ;length
            12. Impedance ;   impedance
            13. Electrical Length ;   angle
            14. <font size=+2>&epsilon;<sub>eff</sub></font> ;
            15. Conductor Loss ;   loss per length
            16. Dielectric Loss ;  loss per length
            Ref: Transmssion Line Design Handbook, p136, g-yanduvarla hat arasi bosluk, b-toplam yukseklik, g<2b olmali
    """
    ...

def broadside_offset_coupled_stripline_analysis(arg, defaultunits):
    """
    Ref: RF and Microwave Coupled Line Circuits

    Args:
        arg(list): First 11 arguments are inputs.

            1. Line Width (w) ;length
            2. Offset (wo) ;length
            3. Metal Thickness (t) ;length
            4. Spacing between lines (s) ;length
            5. Ground Spacing (b);length
            6. Dielectric Permittivity (<font size=+2>&epsilon;<sub>r</sub></font>);
            7. Dielectric Loss Tangent ;
            8. Metal Conductivity ;  electrical conductivity
            9. Metal Permeability ;
            10. Roughness ;length
            11. Frequency ; frequency
            12. Physical Length ;length
            13. Impedance (even) ;   impedance
            14. Impedance (odd);   impedance
            15. Electrical Length ;   angle
            16. <font size=+2>&epsilon;<sub>eff</sub></font> ;
            17. Conductor Loss (Even Mode) ;  loss per length
            18. Conductor Loss (Odd Mode) ;  loss per length
            19. Dielectric Loss ; loss per length
            20. Maximum Coupling ;

    """
    ...

def broadside_offset_coupled_stripline_analysis_view(arg, defaultunits): # -> None:
    """
    """
    ...

def broadside_offset_coupled_stripline_synthesis(arg, defaultunits):
    """

    Args:
        arg(list): First 11 arguments are inputs.

            1. Line Width (w) ;length
            2. Offset (wo) ;length
            3. Metal Thickness (t) ;length
            4. Spacing between lines (s) ;length
            5. Ground Spacing (b);length
            6. Dielectric Permittivity (<font size=+2>&epsilon;<sub>r</sub></font>);
            7. Dielectric Loss Tangent ;
            8. Metal Conductivity ;  electrical conductivity
            9. Metal Permeability ;
            10. Roughness ;length
            11. Frequency ; frequency
            12. Physical Length ;length
            13. Impedance (even) ;   impedance
            14. Impedance (odd);   impedance
            15. Electrical Length ;   angle
            16. <font size=+2>&epsilon;<sub>eff</sub></font> ;
            17. Conductor Loss (Even Mode) ;  loss per length
            18. Conductor Loss (Odd Mode) ;  loss per length
            19. Dielectric Loss ; loss per length
            20. Maximum Coupling ;
            Ref: RF and Microwave Coupled Line Circuits
    """
    ...

def width_broadside_coupled_offset_stripline(Zeven, Zodd, b, s, er): # -> tuple[Unknown, Unknown]:
    ...

def Z_broadside_coupled_offset_stripline(w, wo, b, s, er):
    ...

def broadside_coupled_suspended_stripline_analysis(arg, defaultunits):
    """

    Args:
        arg(list): First 11 arguments are inputs.

            1. Line Width (w) ;length
            2. Ground Spacing (b);length
            3. Metal Thickness (t) ;length
            4. Spacing between lines (s) ;length
            5. Dielectric Permittivity (<font size=+2>&epsilon;<sub>r</sub></font>);
            6. Dielectric Loss Tangent ;
            7. Metal Conductivity ;  electrical conductivity
            8. Metal Permeability ;
            9. Roughness ;length
            10. Frequency ; frequency
            11. Physical Length ;length
            12. Impedance (even) ;   impedance
            13. Impedance (odd);   impedance
            14. Electrical Length (Even Mode);   angle
            15. Electrical Length (Odd Mode) ;   angle
            16. <font size=+2>&epsilon;<sub>eff</sub> (even)</font> ;
            17. <font size=+2>&epsilon;<sub>eff</sub> (odd)</font> ;
            18. Conductor Loss (Even Mode) ;  loss per length
            19. Conductor Loss (Odd Mode) ;  loss per length
            20. Dielectric Loss (Even Mode); loss per length
            21. Dielectric Loss (Odd Mode) ; loss per length
            22. Maximum Coupling ;

            Ref: RF and Microwave Coupled Line Circuits
    """
    ...

def broadside_coupled_suspended_stripline_analysis_view(arg, defaultunits): # -> None:
    """
    """
    ...

def microstrip_step_in_width(w1, w2, eps_r, h, t, freq): # -> list[Unknown] | list[int]:
    """ Reference: Transmission Line Design Handbook p. 317"""
    ...

def stripline_step_in_width2(w1, w2, eps_r, h1, h2, t, freq): # -> list[Unknown] | list[int]:
    """ Reference: Transmission Line Design Handbook p. 350
    DOES NOT WORK, may be problems in units"""
    ...

def stripline_step_in_width(w1, w2, eps_r, h1, h2, t, freq): # -> list[Unknown] | list[int]:
    """ Reference: Transmission Line Design Handbook p. 350"""
    ...

def Z_eeff_broadside_coupled_suspended_stripline(w, s, b, er): # -> tuple[Unknown, Any, Unknown, Unknown]:
    """
    Ref: RF and Microwave Coupled-Line Circuits
    """
    ...

edge_coupled_stripline_analysis = ...
broadside_coupled_stripline_analysis = ...
suspended_icrostripline_analysis = ...
shielded_suspended_stripline_analysis = ...
grounded_coplanar_waveguide_analysis = ...
eccentric_coaxial_line_analysis = ...
coaxial_line_strip_center_analysis = ...
square_coaxial_line_circular_center_analysis = ...
parallel_wires_analysis = ...
edge_coupled_microstrip_analysis = ...
suspended_microstripline_synthesis = ...
grounded_coplanar_waveguide_synthesis = ...
edge_coupled_microstrip_synthesis = ...
edge_coupled_stripline_synthesis = ...
broadside_coupled_stripline_synthesis = ...
if __name__ == "__main__":
    ...
