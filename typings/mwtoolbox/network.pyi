"""
This type stub file was generated by pyright.
"""

"""
Network Parameters
"""
def idealNport(N):
    """
    S-parameters of ideal N-port junction with equal reference impedances at all ports
    """
    ...

def idealGyrator(): # -> matrix[Unknown, Unknown]:
    """
    S-parameters of ideal gyrator
    """
    ...

def idealCoupledLine(Ze, Zo, Te, To, Z0): # -> matrix[Any, Any]:
    """
    S-parameters of ideal coupled line
    Te and To in radian
    3----------4
    1----------2
    """
    ...

def idealamp(G): # -> matrix[Unknown, Unknown]:
    """
    S-parameters of an ideal amplifier/isolator
    G is voltage gain, no reflection, infinite isolation
    """
    ...

def idealatt(G): # -> matrix[Unknown, Unknown]:
    """
    S-parameters of an ideal attenuator
    G is voltage gain (<1), no reflection
    """
    ...

def circulator(): # -> matrix[Unknown, Unknown]:
    """
    S-parameters of an ideal circulator (circulation direction 1⇒2⇒3)
    """
    ...

def shunt_z(Z): # -> matrix[Unknown, Unknown]:
    """
    ABCD parameters of shunt impedance
    """
    ...

def series_z(Z): # -> matrix[Unknown, Unknown]:
    """
    ABCD parameters of series impedance
    """
    ...

def jinv(J): # -> matrix[Unknown, Unknown]:
    """
    ABCD parameters of J - inverter
    """
    ...

def jinv_lumped(X):
    """
    ABCD parameters of J - inverter produced by 3 inductors in Tee form.
    """
    ...

def kinv(K): # -> matrix[Unknown, Unknown]:
    """
    ABCD parameters of k - inverter
    """
    ...

def tline(Zo, theta): # -> matrix[Unknown, Unknown]:
    """
    ABCD parameters of ideal transmission line,  theta = radian
    """
    ...

def tline_lossy(Zo, gamma): # -> matrix[Unknown, Unknown]:
    """
    ABCD parameters of lossy transmission line,  gamma = complex propagation constant
    """
    ...

def tline_list(Zo, theta): # -> tuple[Any | Unknown, ...]:
    """
    ABCD parameters of ideal transmission line,  theta = radian
    """
    ...

def transformer(N): # -> matrix[Unknown, Unknown]:
    """
    ABCD parameters of ideal transformer (1:N)
    """
    ...

def t_network(Zs1, Zp, Zs2): # -> matrix[Unknown, Unknown]:
    """
    ABCD parameters of Tee network
    """
    ...

def pi_network(Zp1, Zs, Zp2): # -> matrix[Unknown, Unknown]:
    """
    ABCD parameters of Pi network
    """
    ...

def abcd2y(M): # -> matrix[Unknown, Unknown]:
    """
    ABCD parameters to Y - Parameters conversion
    """
    ...

def y2abcd(M): # -> matrix[Unknown, Unknown]:
    """
    Y-Parameters to ABCD parameters conversion
    """
    ...

def t2s(M): # -> matrix[Unknown, Unknown]:
    """
    Transfer scattering parameters to S-Parameters conversion
    According to definition [b1,a1]=T.[a2,b2]
    Ref: https://en.wikipedia.org/wiki/Scattering_parameters#Scattering_transfer_parameters
    """
    ...

def t2s_list(M): # -> list[Unknown]:
    """
    Transfer scattering parameters to S-Parameters conversion
    According to definition [b1,a1]=T.[a2,b2]
    Ref: https://en.wikipedia.org/wiki/Scattering_parameters#Scattering_transfer_parameters
    """
    ...

def s2t(M): # -> matrix[Unknown, Unknown]:
    """
    S-Parameters to Transfer scattering parameters conversion
    According to definition [b1,a1]=T.[a2,b2]
    Ref: https://en.wikipedia.org/wiki/Scattering_parameters#Scattering_transfer_parameters
    """
    ...

def s2t_list(M): # -> list[Unknown]:
    """
    S-Parameters to Transfer scattering parameters conversion
    According to definition [b1,a1]=T.[a2,b2]
    Ref: https://en.wikipedia.org/wiki/Scattering_parameters#Scattering_transfer_parameters
    """
    ...

def abcd2z(M): # -> matrix[Unknown, Unknown]:
    """
    ABCD parameters to Z - Parameters conversion
    """
    ...

def z2abcd(M): # -> matrix[Unknown, Unknown]:
    """
    Z - Parameters to ABCD parameters conversion
    """
    ...

def abcd2s(M, Zo=...): # -> matrix[Unknown, Unknown]:
    """
    ABCD parameters to S - Parameters conversion
    Valid for real Zo value
    """
    ...

def abcd2s_list(M, Zo=...): # -> list[Unknown]:
    """
    ABCD parameters to S - Parameters conversion
    Valid for real Zo value
    """
    ...

def s2abcd(M, Z=...): # -> matrix[Unknown, Unknown]:
    """
    S-Parameters to ABCD parameters conversion
    Valid for real Z values
    Z: reference impedance list [Z1, Z2]
    """
    ...

def abcd2t(M, Zo=...): # -> matrix[Unknown, Unknown]:
    """
    ABCD parameters to T - Parameters conversion

    ABCD: [V1 I1]=ABCD*[V2 -I2]
    Pseudo-Wave or Power-Wave? Don't use for complex impedances.
    """
    ...

def abcd_change_ports(M): # -> None:
    """
    Switching ports of ABCD parameters
    """
    ...

def t2abcd(M, Z=...): # -> matrix[Unknown, Unknown]:
    """
    T-parameters to ABCD parameters conversion
    """
    ...

def snp2smp(SM, ports):
    """
    This method changes the port numbering of the network
    port j of new network corresponds to ports[j] in old network
    if the length of "ports" argument is lower than number of ports, remaining ports are terminated with current reference impedances and number of ports are reduced.
    """
    ...

def cascade_networks(networks): # -> Any:
    """
    Cascading 2-port Networks,  input and output is ABCD matrices of networks
    """
    ...

def parallel_networks(networks): # -> matrix[Any, Any]:
    """
    Paralleling 2-port Networks,  input and output  is ABCD matrices of networks
    """
    ...

def series_networks(networks): # -> matrix[Any, Any]:
    """
    Series Connection of Networks (reference pins of 1. network is connected to alive pins of 2. network),  input and output  is ABCD matrices of networks
    """
    ...

def s_normalize_pseudo(S, Zold, Znew):
    """
    Zold,  Znew port_sayisi uzunlugunda dizilerdir
    Pseudo-Wave icin
    """
    ...

def s_normalize_power(S, Zold, Znew):
    """
    Zold,  Znew port_sayisi uzunlugunda dizilerdir
    Power-Wave icin
    Reference: Article, “Multiport conversions between S, Z, Y, h, ABCD, and T parameters”
    """
    ...

def s_phase_deembed(S, phase):
    """
    S-parameter deembedding
    S is numpy.matrix NxN
    phase, deembedding phase for each port in radian. Positive phase is deembedding into the circuit
    """
    ...

def connect_2_ports(Smatrix, k, m): # -> matrix[Any, Any]:
    """ Port-m is connected to port-k and both ports are removed
    Reference: QUCS technical.pdf, S-parameters in CAE programs, p.29
    """
    ...

def connect_network_1_conn_retain(Smatrix, EX, k, m): # -> matrix[Any, Any]:
    ...

def connect_network_1_conn(Smatrix, EX, k, m): # -> matrix[Any, Any]:
    """ Port-m of EX circuit is connected to port-k of this circuit
    Remaining ports of EX are added to the port list of this circuit in order.
    Reference: QUCS technical.pdf, S-parameters in CAE programs, p.29
    """
    ...

def connect_2_ports_list(Smatrix, conns): # -> matrix[Any, Any]:
    """ Short circuit ports together one-to-one. Short circuited ports are removed.
    Ports that will be connected are given as tuples in list conn
    i.e. conn=[(p1,p2),(p3,p4),..]
    The order of remaining ports is kept.
    Reference: QUCS technical.pdf, S-parameters in CAE programs, p.29
    """
    ...

def connect_2_ports_retain(Smatrix, k, m): # -> matrix[Any, Any]:
    """ Port-m and Port-k are joined to a single port.
    New port becomes the last port of the circuit.
    Reference: QUCS technical.pdf, S-parameters in CAE programs, p.29
    """
    ...

if __name__ == "__main__":
    ...
