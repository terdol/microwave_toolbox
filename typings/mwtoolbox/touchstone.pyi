"""
This type stub file was generated by pyright.
"""

from .genel import *
from .myconstants import *

fcoef = ...
def extract_rlgc(spr, length): # -> tuple[Unknown, NDArray[Any]]:
    """Extraction of RLGC parameters from S-parameters of a uniform transmission line.

    Args:
        spr (SPFILE): SPFILE object of two port network.
        length (float): Length of transmission line.

    Returns:
        tuple: tuple of two complex numpy arrays (Inductance per unit length, Characteristic impedance of the line).
    """
    ...

def write_impedance_as_s1p(filename, frequencies, Z): # -> None:
    ...

def write_impedance_as_table(filename, frequencies, Z): # -> None:
    ...

def parse_format(line): # -> tuple[str, str, float | complex | Unbound | None]:
    ...

def generate_multiport_spfile(conf_filename, output_filename): # -> None:
    """
    Configuration file format:
    - comments start by "#"
    - every line's format is:
        i,j ? filename ? is, js
        meaning:
        S(is,js) of touchstone file filename is S(i,j) of output_filename

    Args:
        conf_filename(str): Name of the configuration filename.
        output_filename(str): Name of the output filename.
    """
    ...

def extract_gamma_ereff(filename_long_line, filename_short_line, dL, sm=...): # -> tuple[Any, Unknown]:
    """Extraction of complex propagation constant (gamma) and complex effective permittivity from the S-Parameters of 2 uniform transmission lines with different lengths.

    Args:
        filename_long_line (str): S-Parameter filename of longer line.
        filename_short_line (str): S-Parameter filename of shorter line. If None is given, only long line is used for extraction.
        dL (float): Difference of lengths of two lines (positive in meter). If filename_short_line is None, then this is the length of long line.
        sm (int, optional): If this is larger than 1, this is used as number of points for smoothing. Defaults to 1.

    Returns:
        tuple: tuple of two complex numpy arrays (gamma, er_eff).
    """
    ...

def extract_gamma_ereff_all(files, Ls, sm=...): # -> tuple[float, float]:
    """Extraction of average complex propagation constant (gamma) and complex effective permittivity from the S-Parameters of multiple uniform transmission lines with different lengths.

    Args:
        files (list): List of S-Parameter filenames of transmission lines.
        Ls (list): List of lengths of transmission lines in the same order as *files* parameter.
        sm (int, optional): If this is larger than 1, this is used as number of points for smoothing. Defaults to 1.

    Returns:
        tuple: tuple of two complex numpy arrays (gamma, er_eff).
    """
    ...

def cascade_2_ports(filenames): # -> spfile:
    ...

def average_networks(networks): # -> spfile:
    ...

def untermination_method_old(g1, g2, g3, gL1, gL2, gL3, returnS2P=..., freqs=...): # -> spfile | tuple[Unknown, Unknown, Any]:
    """Determination of :math:`S_{11}`, :math:`S_{22}` and :math:`S_{21}=S_{12}` for a 2-port network network using 3 reflection coefficient values at port-1 for 3 terminations at port-2. :math:`S_{21}` can only be calculated with a sign ambiguity because it exists only as square in the formulae.

    Port-1: Input port.
    Port-2: Output port where load impedances are switched.

    Args:
        g1 (float, complex or ndarray): Reflection coefficient at port-1 when port-2 is terminated by a load with reflection coefficient gL1
        g2 (float, complex or ndarray): Reflection coefficient at port-1 when port-2 is terminated by a load with reflection coefficient gL2
        g3 (float, complex or ndarray): Reflection coefficient at port-1 when port-2 is terminated by a load with reflection coefficient gL3
        gL1 (float, complex or ndarray): Reflection coefficient of load at port-2 that gives g1 reflection coefficient at port-1
        gL2 (float, complex or ndarray): Reflection coefficient of load at port-2 that gives g2 reflection coefficient at port-1
        gL3 (float, complex or ndarray): Reflection coefficient of load at port-2 that gives g3 reflection coefficient at port-1
        returnS2P (boolean): If True, function returns an *spfile* object of the 2-port network, if False, it returns 3-tuple of S-Parameter arrays. Default is False.
        freqs (numpy.ndarray, list): If returnS2P is True, this input is used as the frequency points of the returned *spfile* object. Default is None.

    Returns:
        tuple: Either 3-Element tuple of (S11, S22, S21) or *spfile* object, depending on returnS2P input.
    """
    ...

def untermination_method(g1, g2, g3, gL1, gL2, gL3, returnS2P=..., freqs=...): # -> spfile | tuple[NDArray[Any], NDArray[Any], NDArray[Any]]:
    """Determination of :math:`S_{11}`, :math:`S_{22}` and :math:`S_{21}=S_{12}` for a 2-port network network using 3 reflection coefficient values at port-1 for 3 terminations at port-2. :math:`S_{21}` can only be calculated with a sign ambiguity because it exists only as square in the formulae.

    Port-1: Input port.
    Port-2: Output port where load impedances are switched.

    Args:
        g1 (float, complex or ndarray): Reflection coefficient at port-1 when port-2 is terminated by a load with reflection coefficient gL1
        g2 (float, complex or ndarray): Reflection coefficient at port-1 when port-2 is terminated by a load with reflection coefficient gL2
        g3 (float, complex or ndarray): Reflection coefficient at port-1 when port-2 is terminated by a load with reflection coefficient gL3
        gL1 (float, complex or ndarray): Reflection coefficient of load at port-2 that gives g1 reflection coefficient at port-1
        gL2 (float, complex or ndarray): Reflection coefficient of load at port-2 that gives g2 reflection coefficient at port-1
        gL3 (float, complex or ndarray): Reflection coefficient of load at port-2 that gives g3 reflection coefficient at port-1
        returnS2P (boolean): If True, function returns an *spfile* object of the 2-port network, if False, it returns 3-tuple of S-Parameter arrays. Default is False.
        freqs (numpy.ndarray, list): If returnS2P is True, this input is used as the frequency points of the returned *spfile* object. Default is None.

    Returns:
        tuple: Either 3-Element tuple of (S11, S22, S21) or *spfile* object, depending on returnS2P input.
    """
    ...

def thru_line_deembedding(thru_filename, line_filename, make_symmetric=...): # -> tuple[spfile, Any]:
    """Extraction of transition s-parameters from THRU and LINE measurements. Transitions on both sides are assumed to be identical. For output *spfile* objects, port-1 is launcher side and port-2 is transmission line side. The length difference between LINE and THRU should be ideally :math:`\lambda/4`.
    The reference impedance for the 2. port of the transition should be the same as the characteristic impedance of the interconnecting line. So the reference impedances of the output *spfile* should be adjusted (without renormalizing s-parameters) after calling this function. The minimum frequency in the S-Parameter files should be such that the phase difference between the measurements should be smaller than 2:math:`\pi`.

    Args:
        thru_filename (str): 2-Port S-Parameter filename of THRU measurement
        line_filename (str): 2-Port S-Parameter filename of LINE measurement

    Returns:
        tuple(spfile, numpy.ndarray): 2-Element tuple of (transition spfile, complex phase vector (:math:`-\gamma l`) of connecting line of LINE standard (in radian))
    """
    ...

def trl_launcher_extraction(thru_file, line_file, reflect_file, refstd=...): # -> tuple[spfile, spfile, NDArray[Unknown]]:
    """Extraction of launcher s-parameters by THRU, LINE, REFLECT calibration. For both output *spfile* objects, port-1 is launcher side and port-2 is transmission line side.
    Reference: TRL algorithm to de-embed a RF test fixture.pdf (Note that the T-Matrix definiton in the reference document is different than this library.)

    Args:
        thru_file (str): 2-Port S-Parameter filename or *spfile* of THRU measurement
        line_file (str): 2-Port S-Parameter filename or *spfile* of LINE measurement
        reflect_file (str): 2-Port S-Parameter filename or *spfile* of REFLECT measurement
        refstd (boolean): True if OPEN is used as REFLECT standard and False (default) if SHORT is used

    Returns:
        tuple(spfile, spfile, numpy.ndarray): 3-Element tuple of (left side launcher spfile, right side launcher spfile, positive phase vector of connecting line of LINE standard (in radian) )
    """
    ...

class spfile:
    """Class that represents an RF network. It can be used to read/write Touchstone files and process RF networks.

    Attributes:
        file_data_format(str): Format of the data in the file if the data is read from a Touchstone file. Possible values are "DB", "MA", "RI".
        file_freq_unit(str):
        file_name(str):
        refimpedance(list):
        sdata(numpy.ndarray):
        ydata(numpy.ndarray):
        zdata(numpy.ndarray):
        abcddata(list):
        tdata(list):
        port_names(list):
        gammas(numpy.ndarray): Gamma (propagation constant) values for each port. The shape of the array: (n_ports, frequencypoints). This data is typically read from a touchstone file exported from HFSS.
        inplace(int):
        s_ok(bool):
        y_ok(bool):
        z_ok(bool):
        t_ok(bool):
        abcd_ok(bool):
        sym_smatrix = None
        sym_params = dict()
        undefinedYindices=set()
        undefinedZindices=set()
        smatrix_type(int):  # 1: "power-wave"
                       # 2: "pseudo-wave"
                       # 3: "HFSS pseudo-wave"
        comments(list): # comments in the file before the format line
        sparam_gen_func = None # this function generates smatrix of the network given the frequency
        sparam_mod_func = None # this function modifies smatrix of the network given the frequency
        params(dict):
    """
    def __init__(self, filename=..., freqs=..., n_ports=..., skiplines=..., only_port_number=...) -> None:
        ...
    
    aliases = ...
    def __setattr__(self, name, value): # -> None:
        ...
    
    def __getattr__(self, name): # -> Any:
        ...
    
    def copy(self): # -> Self@spfile:
        ...
    
    def set_smatrix_type(self, smatrix_type): # -> Self@spfile:
        ...
    
    def change_smatrix_type(self, smatrix_type): # -> None:
        """
        Change S-Matrix formulation and re-calculate s-parameters.

        Args:
            smatrix_type(int): S-Matrix type. Possible values:
                               1: Power-Wave, 2:Pseudo-Wave, 3: HFSS Pseudo-Wave
        """
        ...
    
    def copy_data_from_spfile(self, local_i, local_j, source_i, source_j, sourcespfile): # -> None:
        """ This method copies S-Parameter data from another SPFILE object
        """
        ...
    
    def set_frequencies_wo_recalc(self, freqs): # -> None:
        """Directly sets the frequencies of this network, but does not re-calculate s-parameters.

        Args:
            freqs (list or ndarray): New frequency values
        """
        ...
    
    def port_numbers_from_names(self, *names): # -> list[int | Unknown]:
        ...
    
    def setdatapoint(self, m, indices, x): # -> None:
        """Set the value for some part of S-Parameter data.

            .. math:: S_{i j}[m:m+len(x)]=x

        Args:
            m (int): Starting frequency indice
            indices (tuple of int): Parameters to be set (i,j)
            x (number or list): New value. If this is a number, it is converted to a list.
        """
        ...
    
    def column_of_data(self, i, j):
        """Gets the indice of column at *sdata* matrix corresponding to :math:`S_{i j}`
        For internal use of the library.

        Args:
            i (int): First index
            j (int): Second index

        Returns:
            int: Index of column
        """
        ...
    
    def set_sym_smatrix(self, SM): # -> None:
        """This function is used to set arithmetic expression for S-Matrix, if S-Matrix is defined using symbolic variables.

        Args:
            SM (sympy.Matrix): Symbolic ``sympy.Matrix`` expression for S-Parameter matrix
        """
        ...
    
    def set_sym_params(self, paramdict): # -> None:
        """This function is used to set the values of symbolic variables of the network. This is used if the S-Matrix of the network is defined by an arithmetic expression containing symbolic variables. This property is used in conjunction with *sympy* library for symbolic manipulation. Arithmetic expression for S-Matrix is defined by ``set_sym_smatrix`` function.

        Args:
            paramdict (dict): This is a dictionary containing the values of symbolic variables of the network
        """
        ...
    
    def set_sparam_gen_func(self, func=...): # -> None:
        """This function is used to set the function that generates s-parameters from frequency.

        Args:
            func (function, optional): function to be set. Defaults to None.
        """
        ...
    
    def set_sparam_mod_func(self, func=...): # -> None:
        """This function is used to set the function that generates s-parameters from frequency.

        Args:
            func (function, optional): function to be set. Defaults to None.
        """
        ...
    
    def set_smatrix_at_frequency_point(self, indices, smatrix): # -> None:
        """Set S-Matrix at frequency indices

        Args:
            indices (list): List of frequency indices
            smatrix (numpy.matrix): New S-Matrix value which is to be set at all *indices*
        """
        ...
    
    def make_symmetric(self, kind=..., inplace=...): # -> Self@spfile:
        """Make SPFILE symmetric by taking the average of S11 and S22. S12=S21 assumed.

        Args:
            inplace (int, optional): Object editing mode. Defaults to -1.

        Returns:
            spfile: Modified spfile object
        """
        ...
    
    def snp2smp(self, ports, inplace=...): # -> Self@spfile:
        """This method changes the port numbering of the network
        port j of new network corresponds to ports[j] in old network.

        if the length of "ports" argument is lower than number of ports, remaining ports are terminated with current reference impedances and number of ports are reduced.

        Args:
            ports (list): New port order
            inplace (int, optional): Object editing mode. Defaults to -1.

        Returns:
            spfile: Modified spfile object
        """
        ...
    
    def scaledata(self, scale=..., dataindices=...): # -> None:
        """
        Multiply all elements in S-Parameter matrices by *scale*.
        """
        ...
    
    def read_file_again(self): # -> None:
        """
        Network data is read from the file named *filename*.
        """
        ...
    
    def read_file(self, file_name, skiplines=..., only_port_number=...):
        """
        Network data is read from file. *filename* attribute of object is set with given argument.

        Args:
            filename(str): Name of the file to be read. Its extension should be either "ts" of in the form of "sNp" or "sN".
            skiplines(int, optional): This option is used if some beginning lines will be ignored. Default value is 0.
            only_port_number(bool, optional): If True, the aim of the file reading is only to get the number of ports and the process is terminated once the port number is determined. Default is False.
        """
        ...
    
    def Ffunc(self, imp): # -> matrix[Any, Any]:
        """Calculates F-matrix in a, b definition of S-Parameters. For internal use of the library.

                .. math::
                    a=F(V+Z_rI)

                    b=F(V-Z_r^*I)
        Args:
            imp (numpy.ndarray): Zref, Reference impedance array for which includes the reference impedance for each port.

        Returns:
            numpy.matrix: F-Matrix
        """
        ...
    
    def calc_syz(self, input=..., indices=...):
        """This function, using one of S, Y and Z parameters, calculates the other two parameters. Y and Z-matrices calculated separately instead of calculating one and taking inverse. Because one of them may be undefined for some circuits.

        Args:
            input (str, optional): Input parameter type (should be S, Y or Z). Defaults to "S".
            indices (list, optional): If given, output matrices are calculated only at the indices given by this list. If it is None, then output matrices are calculated at all frequencies. Defaults to None.
        """
        ...
    
    def calc_t_eigs(self, port1=..., port2=...): # -> None:
        """ Eigenfunctions and Eigenvector of T-Matrix is calculated.
        Only power-wave formulation is implemented """
        ...
    
    def s2t(self): # -> Self@spfile:
        """Calculate transmission matrix for 2-port networks.

        Returns:
            spfile: SPFILE object
        """
        ...
    
    def sqrt_network(self): # -> Self@spfile:
        """Calculate the spfile, when two of which are cascaded, this spfile is obtained.

        Returns:
            spfile: SPFILE object
        """
        ...
    
    def inverse_2port(self, inplace=...): # -> Self@spfile:
        """Take inverse of 2-port data for de-embedding purposes. The reference impedance of the network is not changed.

        Args:
            inplace (int, optional): Object editing mode. Defaults to -1.

        Returns:
            spfile: Inverted 2-port spfile
        """
        ...
    
    def s2abcd(self, port1=..., port2=...): # -> NDArray[Any]:
        """S-Matrix to ABCD matrix conversion between 2 chosen ports. Other ports are terminated with reference impedances

        Args:
            port1 (int, optional): Index of Port-1. Defaults to 1.
            port2 (int, optional): Index of Port-2. Defaults to 2.

        Returns:
            numpy.matrix: ABCD data. Numpy.matrix of size (ns,4) (ns: number of frequencies). Each row contains (A,B,C,D) numbers in order.
        """
        ...
    
    def input_impedance(self, k):
        """Input impedance at port k. All ports are terminated with reference impedances.

        Args:
            port (int): Port number for input impedance.

        Returns:
            numpy.ndarray: Array of impedance values for all frequencies
        """
        ...
    
    def load_impedance(self, Gamma_in, port1=..., port2=...):
        """Calculates termination impedance at port2 that gives Gamma_in reflection coefficient at port1.

        Args:
            Gamma_in (float,ndarray): Required reflection coefficient.
            port1 (int): Source port.
            port2 (int): Load port.

        Returns:
            numpy.ndarray: Array of reflection coeeficient of termination at port2
        """
        ...
    
    def gmax(self, port1=..., port2=..., dB=...): # -> NDArray[signedinteger[Any]] | NDArray[Unknown]:
        """Calculates Gmax from port1 to port2. Other ports are terminated with current reference impedances. If dB=True, output is in dB, otherwise it is a power ratio.

        Args:
            port1 (int, optional): Index of input port. Defaults to 1.
            port2 (int, optional): Index of output port. Defaults to 2.
            dB (bool, optional): set True to enable dB output. Defaults to True.

        Returns:
            numpy.ndarray: Array of Gmax values for all frequencies
        """
        ...
    
    def set_port_name(self, name, i): # -> None:
        """Set name of a specific port.

        Args:
            name(str): New name of the port
            i(int): Port number
        """
        ...
    
    def get_port_number_from_name(self, isim): # -> int:
        """Index of first port index with name *isim*

        Args:
            isim (bool): Name of the port

        Returns:
            int: Port index if port is found, 0 otherwise
        """
        ...
    
    def gav(self, port1=..., port2=..., ZS=..., dB=...): # -> Any:
        """Available gain from port1 to port2. If dB=True, output is in dB, otherwise it is a power ratio.

            .. math:: G_{av}=\\frac{P_{av,toLoad}}{P_{av,fromSource}}

        Args:
            port1 (int, optional): Index of input port. Defaults to 1.
            port2 (int, optional): Index of output port. Defaults to 2.
            ZS (list or numpy.ndarray, optional): Impedance of input port. Defaults to current reference impedance.
            dB (bool, optional): Enable dB output. Defaults to True.

        Returns:
            numpy.ndarray: Array of Gmax values for all frequencies
        """
        ...
    
    def gop(self, port1=..., port2=..., ZL=..., dB=...): # -> Any:
        """Operating power gain from port1 to port2 with load impedance of ZL. If dB=True, output is in dB, otherwise it is a power ratio.

            .. math:: G_{op}=\\frac{P_{toLoad}}{P_{toNetwork}}

        Args:
            port1 (int, optional): Index of input port. Defaults to 1.
            port2 (int, optional): Index of output port. Defaults to 2.
            ZL (ndarray or float, optional): Load impedance. Defaults to current port impedance at port2.
            dB (bool, optional): Enable dB output. Defaults to True.

        Returns:
            numpy.ndarray: Array of Gop values for all frequencies
        """
        ...
    
    def gop2(self, port1=..., port2=..., ZL=..., dB=...): # -> Any:
        """Operating power gain from port1 to port2 with load impedance of ZL. If dB=True, output is in dB, otherwise it is a power ratio.

            .. math:: G_{op}=\\frac{P_{toLoad}}{P_{toNetwork}}

        Args:
            port1 (int, optional): Index of input port. Defaults to 1.
            port2 (int, optional): Index of output port. Defaults to 2.
            ZL (ndarray or float, optional): Load impedance. Defaults to current port impedance at port2.
            dB (bool, optional): Enable dB output. Defaults to True.

        Returns:
            numpy.ndarray: Array of Gop values for all frequencies
        """
        ...
    
    def conj_match_uncoupled(self, ports=..., inplace=..., noofiters=...): # -> Self@spfile:
        """Sets the reference impedance for given ports as the complex conjugate of output impedance at each port.
        The ports are assumed to be uncoupled. Coupling is taken care of by doing the same operation multiple times.

        Args:
            ports (list,optional): [description]. Defaults to all ports.
            inplace (int, optional): Object editing mode. Defaults to -1.
            noofiters (int, optional): Numberof iterations. Defaults to 50.

        Returns:
            spfile object with new s-parameters
        """
        ...
    
    def Z_conjmatch(self, port1=..., port2=...): # -> tuple[Unknown, Unknown]:
        """Calculates source and load impedances for simultaneous conjugate match.

        Args:
            port1 (int, optional): [description]. Defaults to 1.
            port2 (int, optional): [description]. Defaults to 2.

        Returns:
            2-tuple of numpy.arrays (GS, GL):
                - GS: Reflection coefficient of Port-1 Impedance
                - GL: Reflection coefficient of Port-2 Impedance
        """
        ...
    
    def gt(self, port1=..., port2=..., ZS=..., ZL=..., dB=...): # -> Any:
        """This method calculates transducer gain (GT) from port1 to port2. Source and load impedances can be specified independently. If any one of them is not specified, current reference impedance is used for that port. Other ports are terminated by reference impedances. This calculation can also be done using impedance renormalization.

            .. math:: G_{av}=\\frac{P_{load}}{P_{av,fromSource}}

        Args:
            port1 (int, optional): Index of source port. Defaults to 1.
            port2 (int, optional): Index of load port. Defaults to 2.
            dB (bool, optional): Enable dB output. Defaults to True.
            ZS (float, optional): Source impedance. Defaults to 50.0.
            ZL (float, optional): Load impedance. Defaults to 50.0.

        Returns:
            numpy.ndarray: Array of GT values for all frequencies
        """
        ...
    
    def interpolate_data(self, datain, freqs): # -> NDArray[complexfloating[Any, Any]]:
        """Calculate new data corresponding to new frequency points *freqs* by interpolation from original data corresponding to current frequency points of the network.

        Args:
            data (numpy.ndarray or list): Original data specified at current frequency points of the network.
            freqs (numpy.ndarray or list): New frequency list.

        Returns:
            numpy.ndarray: New data corresponding to *freqs*
        """
        ...
    
    def return_s2p(self, port1=..., port2=...): # -> tuple[ndarray[Any, dtype[Any]] | Unknown, ndarray[Any, dtype[Any]] | Unknown, ndarray[Any, dtype[Any]] | Unknown, ndarray[Any, dtype[Any]] | Unknown]:
        """Return 2-port s-parameters tuple between port1- and port-2."""
        ...
    
    def stability_factor_mu1(self, port1=..., port2=...):
        """Calculates :math:`\mu_1` stability factor, from port1 to port2. Other ports are terminated with reference impedances.

        Args:
            port1 (int, optional): Index of source port. Defaults to 1.
            port2 (int, optional): Index of load port. Defaults to 2.

        Returns:
            numpy.ndarray: Array of stability factor for all frequencies
        """
        ...
    
    def stability_factor_mu2(self, port1=..., port2=...):
        """Calculates :math:`\mu_2` stability factor, from port1 to port2. Other ports are terminated with reference impedances.

        Args:
            port1 (int, optional): Index of source port. Defaults to 1.
            port2 (int, optional): Index of load port. Defaults to 2.

        Returns:
            numpy.ndarray: Array of stability factor for all frequencies
        """
        ...
    
    def stability_factor_k(self, port1=..., port2=...):
        """Calculates *k* stability factor, from port1 to port2. Other ports are terminated with reference impedances.

        Args:
            port1 (int, optional): Index of source port. Defaults to 1.
            port2 (int, optional): Index of load port. Defaults to 2.

        Returns:
            numpy.ndarray: Array of stability factor for all frequencies
        """
        ...
    
    def change_ref_impedance(self, Znewinput, inplace=...): # -> Self@spfile:
        """Changes reference impedance and re-calculates S-Parameters.

        Args:
            Znew (float or list): New Reference Impedance. Its type can be:
                - float: In this case Znew value is used for all ports
                - list: In this case each element of this list is assgined to different ports in order as reference impedance. Length of *Znew* should be equal to number of ports. If an element of the list is None, then the reference impedance for corresponding port is not changed.

        Returns:
            spfile: The spfile object with new reference impedance
        """
        ...
    
    def prepare_ref_impedance_array(self, imparray=...): # -> NDArray[Unknown]:
        """Turns reference impedance array which is composed of numbers,arrays, functions or 1-ports to numerical array which
        is composed of numbers and arrays. It is made sure that :math:`Re(Z)\neq 0`. Mainly for internal use.

        Args:
            imparray (list): List of impedance array

        Returns:
            numpy.ndarray: Calculated impedance array
        """
        ...
    
    def impulse_response(self, i=..., j=..., dc_interp=..., dc_value=..., max_time_step=..., freq_res_coef=..., window_name=...): # -> tuple[Unknown, NDArray[Unknown], ndarray[Unknown, Unknown], Any, Any, Any, Any, Any, Any]:
        """Calculates impulse response of :math:`S_{i j}`

        Args:
            i (int, optional): Port-1. Defaults to 2.
            j (int, optional): Port-2. Defaults to 1.
            dc_interp (int, optional): If 1, add DC point to interpolation. Defaults to 1.
            dc_value (float, optional): dc_value to be used at interpolation if *dc_interp=0*. Defaults to 0.0. This value is appended to :math:`S_{i j}` and the rest is left to interpolation in *data_array* function.
            max_time_step (float, optional): Not used for now. Defaults to 1.0.
            freq_res_coef (float, optional): Coeeficient to increase the frequency resolution by interpolation. Defaults to 1.0 (no interpolation).
            window (str, optional): Windows function to prevent ringing. Defaults to "blackman". Other windows will be added later.

        Returns:
            9-tuple: The elements of the tuple are the following in order:
                1. Raw frequency data used as input
                2. Window array
                3. Time array
                4. Time-Domain Waveform of Impulse Response
                5. Time-Domain Waveform of Impulse Input
                6. Time step
                7. Frequency step
                8. Size of input array
                9. Max Value of Impulse Input
        """
        ...
    
    def impulse_response_banded(self, i=..., j=..., dc_interp=..., dc_value=..., max_time_step=..., freq_res_coef=..., Window=...): # -> tuple[NDArray[Any], NDArray[Any], NDArray[Any], Unknown, Unknown, ndarray[Unknown, Unknown], Any, Any, Any, Any, Any, Any]:
        """Calculates impulse response of :math:`S_{i j}`

        Args:
            i (int, optional): Port-1. Defaults to 2.
            j (int, optional): Port-2. Defaults to 1.
            dc_interp (int, optional): If 1, add DC point to interpolation. Defaults to 1.
            dc_value (float, optional): dc_value to be used at interpolation if *dc_interp=0*. Defaults to 0.0. This value is appended to :math:`S_{i j}` and the rest is left to interpolation in *data_array* function.
            max_time_step (float, optional): Not used for now. Defaults to 1.0.
            freq_res_coef (float, optional): Coeeficient to increase the frequency resolution by interpolation. Defaults to 1.0 (no interpolation).
            Window (str, optional): Windows function to prevent ringing. Defaults to "blackman". Other windows will be added later.

        Returns:
            9-tuple: The elements of the tuple are the following in order:
                1. Raw frequency data used as input
                2. Window array
                3. Time array
                4. Time-Domain Waveform of Impulse Response
                5. Time-Domain Waveform of Impulse Input
                6. Time step
                7. Frequency step
                8. Size of input array
                9. Max Value of Impulse Input
        """
        ...
    
    def __sub__(self, SP2): # -> Self@spfile | Literal[0]:
        """Implements SP1-SP2.
        Deembeds SP2 from port-2 of SP1.
        Port ordering is as follows:
        (1)-SP1-(2)---(1)-SP2-(2)
        SP1 is *self*.

        Args:
            SP2 (spfile): Deembedded spfile network

        Returns:
            spfile: The resulting of deembedding process
        """
        ...
    
    def __neg__(self): # -> Self@spfile | None:
        """Calculates an spfile object for two-port networks which is the inverse of this network. This is used to use + and - signs to cascade or deembed 2-port blocks.

        Returns:
            spfile:
                1. *None* if number of ports is not 2.
                2. *spfile* which is the inverse of the spfile object operated on.
        """
        ...
    
    def __add__(self, SP2): # -> Self@spfile | Literal[0]:
        """Implements SP1+SP2. Cascades port-1 of SP2 to port-2 of SP1. Port ordering is shown in the following diagram. Reference impedances of original ports (port-1 of SP1 and port-2 of SP2) are preserved.

            .. ditaa::

                   +-------+      +-------+
                  1|       |2    1|       |2
               1---+  SP1  +------+  SP2  +---2
                   |       |      |       |
                   +-------+      +-------+

        SP1 is *self*.

        Args:
            SP2 (spfile): Appended spfile network

        Returns:
            spfile: The result of cascade of 2 networks
        """
        ...
    
    def check_passivity(self): # -> tuple[list[Unknown], Unknown, list[Unknown]]:
        """This method determines the frequencies and frequency indices at which the network is not passive.
        Reference: Fast Passivity Enforcement of S-Parameter Macromodels by Pole Perturbation.pdf
        For a better discussion: "S-Parameter Quality Metrics (Yuriy Shlepnev)"

        Returns:
            3-tuple of lists: For non-passive frequencies (indices, frequencies, eigenvalues)
        """
        ...
    
    def restore_passivity(self, inplace=...): # -> Self@spfile:
        """Make the network passive by minimum modification.
        Reference: Fast and Optimal Algorithms for Enforcing Reciprocity, Passivity and Causality in S-parameters.pdf

        Args:
            inplace (int, optional): Object editing mode. Defaults to -1.

        Returns:
            spfile: Passive network object
        """
        ...
    
    def restore_passivity2(self): # -> None:
        """**Obsolete**
        Bu metod S-parametre datasinin pasif olmadigi frequenciesda
        S-parametre datasina mumkun olan en kucuk degisikligi yaparak
        S-parametre datasini pasif hale getirir.
        Referans:
        Restoration of Passivity In S-parameter Data of Microwave Measurements.pdf
        """
        ...
    
    def write2file(self, filename=..., parameter=..., freq_unit=..., data_format=..., normalized=...): # -> None:
        """This function writes a parameter (S, Y or Z) file. If the filename given does not have the proper filename extension, it is corrected.

        Args:
            filename (str, optional): Filename to be written. Defaults to "".
            parameter (str, optional): Parameter to be written (S, Y or Z). Defaults to "S".
            freq_unit (str, optional): Frequency unit (GHz, MHz, kHz or Hz). Defaults to "Hz".
            data_format (str, optional): Format of file DB, RI or MA. Defaults to "".
        """
        ...
    
    def connect_2_ports_list(self, conns, inplace=...): # -> Self@spfile:
        """Short circuit ports together one-to-one. Short circuited ports are removed.
        Ports that will be connected are given as tuples in list *conns*
        i.e. conns=[(p1,p2),(p3,p4),..]
        The order of remaining ports is kept.
        Reference: QUCS technical.pdf, S-parameters in CAE programs, p.29

        Args:
            conns (list of tuples): A list of 2-tuples of integers showing the ports connected
            inplace (int, optional): Object editing mode. Defaults to -1.

        Returns:
            spfile: New spfile object
        """
        ...
    
    def connect_2_ports(self, k, m, inplace=...): # -> Self@spfile:
        """Port-m is connected to port-k and both ports are removed.
        Reference: QUCS technical.pdf, S-parameters in CAE programs, p.29

        Args:
            k (int): First port index to be connected.
            m (int): Second port index to be connected.
            inplace (int, optional): Object editing mode. Defaults to -1.

        Returns:
            spfile: New spfile object
        """
        ...
    
    def connect_2_ports_retain(self, k, m, inplace=...): # -> Self@spfile:
        """Port-m is connected to port-k and both ports are removed. New port becomes the last port of the circuit.
        Reference: QUCS technical.pdf, S-parameters in CAE programs, p.29

        Args:
            k (int): First port index to be connected.
            m (int): Second port index to be connected.
            inplace (int, optional): Object editing mode. Defaults to -1.

        Returns:
            spfile: New *spfile* object
        """
        ...
    
    def connect_network_1_conn_retain(self, EX, k, m, inplace=...): # -> Self@spfile:
        """Port-m of EX circuit is connected to port-k of this circuit. This connection point will also be a port. Remaining ports of EX are added to the port list of this circuit in order. The port of connection point will be the last port of the final network.
        Reference: QUCS technical.pdf, S-parameters in CAE programs, p.29

        Args:
            EX (spfile): External network to be connected to this.
            k (int): Port number of self to be connected.
            m (int): Port number of EX to be connected.
            inplace (int, optional): Object editing mode. Defaults to -1.
            preserveportnumbers1 (bool, optional): if True, the number of the first added port will be k. Defaults to False.

        Returns:
            spfile: Connected network
        """
        ...
    
    def connect_network_1_conn(self, EX, k, m, preserveportnumbers=..., inplace=...): # -> Self@spfile:
        """Port-m of EX circuit is connected to port-k of this circuit. Both of these ports will be removed.
        Remaining ports of EX are added to the port list of this circuit in order.
        Reference: QUCS technical.pdf, S-parameters in CAE programs, p.29

        Args:
            EX (spfile): External network to be connected to this.
            k (int): Port number of self to be connected.
            m (int): Port number of EX to be connected.
            inplace (int, optional): Object editing mode. Defaults to -1.
            preserveportnumbers (bool, optional): if True, the number of the first added port will be k. Defaults to False.

        Returns:
            spfile: Connected network
        """
        ...
    
    def add_abs_noise(self, dbnoise=..., phasenoise=..., inplace=...): # -> Self@spfile:
        """This method adds random amplitude and phase noise to the s-parameter data.
        Mean value for both noises are 0.

        Args:
            dbnoise (float, optional): Standard deviation of amplitude noise in dB. Defaults to 0.1.
            phasenoise (float, optional): Standard deviation of phase noise in degrees. Defaults to 0.1.
            inplace (int, optional): object editing mode. Defaults to -1.

        Returns:
            spfile: object with noisy data
        """
        ...
    
    def smoothing(self, smoothing_length=..., inplace=...): # -> Self@spfile:
        """This method applies moving average smoothing to the s-parameter data

        Args:
            smoothing_length (int, optional): Number of points used for smoothing. Defaults to 5.
            inplace (int, optional): object editing mode. Defaults to -1.

        Returns:
            spfile: Network object with smooth data
        """
        ...
    
    def interpolate(self, number_of_points=..., inplace=...): # -> Self@spfile:
        """This method increases the number of frequencies through interpolation.

        Args:
            number_of_points (int, optional): Number of points used for interpolation. Defaults to 5.
            inplace (int, optional): object editing mode. Defaults to -1.

        Returns:
            spfile: Network object with smooth data
        """
        ...
    
    def data_array(self, data_format=..., M=..., i=..., j=..., frequencies=..., ref=..., DCInt=..., DCValue=..., smoothing=..., InterpolationConstant=...):
        """Return a network parameter between ports *i* and *j* (:math:`M_{i j}`) at specified frequencies in specified format.

        Args:
            data_format (str, optional): Defaults to "DB". The format of the data returned. Possible values (case insensitive):
                -   "K": Stability factor of 2-port
                -   "MU1": Input stability factor of 2-port
                -   "MU2": Output stability factor of 2-port
                -   "VSWR": VSWR at port i
                -   "MAG": Magnitude of :math:`M_{i j}`
                -   "DB": Magnitude of :math:`M_{i j}` in dB
                -   "REAL": Real part of :math:`M_{i j}`
                -   "IMAG": Imaginary part of :math:`M_{i j}`
                -   "PHASE": Phase of :math:`M_{i j}` in degrees between 0-360
                -   "UPHASE": Unwrapped Phase of :math:`M_{i j}` in degrees
                -   "GDELAY": Group Delay of :math:`M_{i j}` in seconds
            M (str, optional): Defaults to "S". Possible values (case insensitive):
                -   "S": Return S-parameter data
                -   "Y": Return Y-parameter data
                -   "Z": Return Z-parameter data
                -   "ABCD": Return ABCD-parameter data
            i (int, optional): First port number. Defaults to 1.
            j (int, optional): Second port number. Defaults to 1. Ignored for *data_format*="VSWR"
            frequencies (list, optional): Defaults to []. List of frequencies in Hz. If an empty list is given, networks whole frequency range is used.
            ref (spfile, optional): Defaults to None. If given the data of this network is subtracted from the same data of *ref* object.
            DCInt (int, optional): Defaults to 0. If 1, DC point given by *DCValue* is used at frequency interpolation if *frequencies* is not [].
            DCValue (complex, optional): Defaults to 0.0. DCValue that can be used for interpolation over frequency.
            smoothing (int, optional): Defaults to 0. if this is higher than 0, it is used as the number of points for smoothing.
            InterpolationConstant (int, optional): Defaults to 0. If this is higher than 0, it is taken as the number of frequencies that will be added between 2 consecutive frequency points. By this way, number of frequencies is increased by interpolation.

        Returns:
            numpy.array: Network data array
        """
        ...
    
    def extraction(self, measspfile): # -> spfile:
        """Extract die S-Parameters using measurement data and simulated S-Parameters
        Port ordering in *measspfile* is assumed to be the same as this *spfile*.
        Remaining ports are ports of block to be extracted.
        See "Extracting multiport S-Parameters of chip" in technical document.

        Args:
            measspfile (spfile): *SPFILE* object of measured S-Parameters of first k ports

        Returns:
            spfile: *SPFILE* object of die's S-Parameters
        """
        ...
    
    def uniform_deembed(self, quantity, ports=..., kind=..., inplace=...): # -> Self@spfile | None:
        """This function deembeds some of the ports of S-Parameters. Deembedding quantity can be:
            - Phase in degrees
            - Phase in radians
            - Length in meters
            - Delay in seconds
        A positive quantity means deembedding into the circuit.
        The Zc of de-embedding lines is the reference impedances of each port.

        Args:
            quantity (float or list): Quantity to be deembedded.
                - If a number is given, it is used for all frequencies and ports
                - If a list is given, if its size is 1, its element is used for all ports. If its size is equal to number of ports, the list is used for all frequencies.
                Otherwise its size should be equal to the number of frequencies. If an element of list is number, it is used for all ports. If an element of the list is also a list, the elements size should be same as the number of ports.
            ports (list, optional): List of port numbers to be deembedded. If not given all ports are deembedded.
            kind (string, optional): One of the following values, "degrees", "radians", "length" and "delay". Defaults to "degrees".
            inplace (int, optional): Object editing mode. Defaults to -1.

        Returns:
            spfile: De-embedded spfile
        """
        ...
    
    def S(self, i=..., j=..., data_format=..., freqs=...):
        """Gives :math:`S_{i j}` in *data_format* format.
        Uses *data_array* method internally. This is a convenience function for practical use.

        Args:
            i (int, optional): Port-1. Defaults to 1.
            j (int, optional): Port-2. Defaults to 1.
            data_format (str, optional): See *data_format* parameter of *data_array* method. Defaults to "COMPLEX".
            freqs(numpy.ndarray or list, optional): Frequency points of S-Parameter data. Defaults to None which means data will be calculated for current frequency points of the network.

        Returns:
            numpy.array: :math:`S_{i j}` in *data_format* format
        """
        ...
    
    def ABCD(self, i=..., j=..., data_format=..., freqs=...):
        """Gives :math:`ABCD_{i j}` in *data_format* format.
        Uses *data_array* method internally. This is a convenience function for practical use.

        Args:
            i (int, optional): Port-1. Defaults to 1.
            j (int, optional): Port-2. Defaults to 1.
            data_format (str, optional): See *data_format* parameter of *data_array* method. Defaults to "COMPLEX".
            freqs(numpy.ndarray or list, optional): Frequency points of S-Parameter data. Defaults to None which means data will be calculated for current frequency points of the network.

        Returns:
            numpy.array: :math:`S_{i j}` in *data_format* format
        """
        ...
    
    def T(self, i=..., j=..., data_format=..., freqs=...):
        """Return :math:`T_{i j}` in format *data_format*
        Uses *data_array* method internally. A convenience function for practical use.

        Args:
            i (int, optional): Port-1. Defaults to 1.
            j (int, optional): Port-2. Defaults to 1.
            data_format (str, optional): See *data_format* parameter of *data_array* method. Defaults to "COMPLEX".

        Returns:
            numpy.array: :math:`T_{i j}` as *data_format*
        """
        ...
    
    def Z(self, i=..., j=..., data_format=..., freqs=...):
        """Return :math:`Z_{i j}` in format *data_format*
        Uses *data_array* method internally. A convenience function for practical use.

        Args:
            i (int, optional): Port-1. Defaults to 1.
            j (int, optional): Port-2. Defaults to 1.
            data_format (str, optional): See *data_format* parameter of *data_array* method. Defaults to "COMPLEX".

        Returns:
            numpy.array: :math:`Z_{i j}` as *data_format*
        """
        ...
    
    def Y(self, i=..., j=..., data_format=..., freqs=...):
        """Return :math:`Y_{i j}` in format *data_format*
        Uses *data_array* method internally. A convenience function for practical use.

        Args:
            i (int, optional): Port-1. Defaults to 1.
            j (int, optional): Port-2. Defaults to 1.
            data_format (str, optional): See *data_format* parameter of *data_array* method. Defaults to "COMPLEX".

        Returns:
            numpy.array: :math:`Y_{i j}` as *data_format*
        """
        ...
    
    def set_frequency_limits(self, flow, fhigh, inplace=...): # -> Self@spfile:
        """Remove frequency points higher than *fhigh* and lower than *flow*.

        Args:
            flow (float): Lowest Frequency (Hz)
            fhigh (float): Highest Frequency (Hz)
            inplace (int, optional): Object editing mode. Defaults to -1.

        Returns:
            spfile: spfile object with new frequency points.
        """
        ...
    
    def crop_with_frequency(self, fstart=..., fstop=..., inplace=...): # -> Self@spfile:
        """Crop the points below fstart and above fstop. No recalculation or interpolation occurs.

        Args:
            fstart (float, optional): Lower frequency for cropping. Default value is None which means no cropping will occur at lower frequency side.
            fstop (float, optional): Higher frequency for cropping. Default value is None which means no cropping will occur at higher frequency side.
            inplace (int, optional): Object editing mode. Defaults to -1.

        Returns:
            spfile: spfile object with new frequency points.
        """
        ...
    
    def set_frequency_points(self, frequencies, inplace=...): # -> Self@spfile:
        """Set new frequency points. if S-Parameter data generator function is available, use that to calculate new s-parameter data. If not, use interpolation/extrapolation. For new frequency points, S-Parameters and reference impedances which are in the form of array are re-calculated.

        Args:
            frequencies ((list, numpy.ndarray)): New frequency array in Hz.
            inplace (int, optional): Object editing mode. Defaults to -1.

        Returns:
            spfile: spfile object with new frequency points.
        """
        ...
    
    def set_frequency_points_array(self, fstart, fstop, NumberOfPoints, inplace=...): # -> Self@spfile:
        """Set the frequencies of the object using start-end frequencies and number of points.

        Args:
            fstart ([type]): Start frequency.
            fstop ([type]): End frequency.
            NumberOfPoints (int): Number of frequencies.
            inplace (int, optional): Object editing mode. Defaults to -1.

        Returns:
            spfile: spfile object with new frequency points.
        """
        ...
    
    def convert_s1p_to_s2p(self): # -> Self@spfile:
        ...
    
    @classmethod
    def microstrip_step(cls, w1, w2, eps_r, h, t, freqs=...): # -> Self@spfile:
        """Create an ``spfile`` object corresponding to a microstrip step.

        Args:
            w1 (float): Width of microstrip line at port-1.
            w2 (float): Width of microstrip line at port-2.
            t (float): Thickness of metal.
            freqs (float, optional): Frequency list of object. Defaults to None. If None, frequencies should be set later.

        Returns:
            spfile: An spfile object equivalent to microstrip step.
        """
        ...
    
    @classmethod
    def stripline_step(cls, w1, w2, eps_r, h1, h2, t, freqs=...): # -> Self@spfile:
        """Create an ``spfile`` object corresponding to a stripline step

        Args:
            w1 (float): Width of stripline line at port-1.
            w2 (float): Width of stripline line at port-2.
            eps_r (float): Relative permittivity of stripline substrate.
            h (float): Thickness of stripline substrate.
            t (float): Thickness of metal.
            freqs (float, optional): Frequency list of object. Defaults to None. If None, frequencies should be set later.

        Returns:
            spfile: An spfile object.
        """
        ...
    
    @classmethod
    def shunt_impedance(cls, Z, freqs=...): # -> Self@spfile:
        """Create an ``spfile`` object corresponding to a stripline step

        Args:
            R (float): Shunt resistance.
            freqs (float, optional): Frequency list of object. Defaults to None. If None, frequencies should be set later.

        Returns:
            spfile: An spfile object.
        """
        ...
    
    @classmethod
    def series_impedance(cls, Z, freqs=...): # -> Self@spfile:
        """Create an ``spfile`` object corresponding to a stripline step

        Args:
            R (float): Shunt resistance.
            freqs (float, optional): Frequency list of object. Defaults to None. If None, frequencies should be set later.

        Returns:
            spfile: An spfile object.
        """
        ...
    
    @classmethod
    def microstrip_line(cls, length, w, h, t, er, freqs=...): # -> Self@spfile:
        """Create an ``spfile`` object corresponding to a microstrip line.

        Args:
            length (float): Length of microstrip line.
            w (float): Width of microstrip line.
            h (float): Thickness of substrate.
            t (float): Thickness of metal.
            er (float): Relative permittivity of microstrip substrate.
            freqs (float, optional): Frequency list of object. Defaults to None. If None, frequencies should be set later.

        Returns:
            spfile: An spfile object.
        """
        ...
    
    @classmethod
    def stripline(cls, length, w, er, h1, h2, t, freqs=...): # -> Self@spfile:
        """Create an ``spfile`` object corresponding to a stripline transmission line.

        Args:
            length (float): Length of cpwg line.
            w (float): Width of stripline.
            er (float): Relative permittivity of substrate.
            h1 (float): Thickness of substrate from bottom ground to bottom of line.
            h2 (float): Thickness of substrate from top line to top ground.
            t (float): Thickness of metal.
            freqs (float, optional): Frequency list of object. Defaults to None. If None, frequencies should be set later.

        Returns:
            spfile: An spfile object.
        """
        ...
    
    @classmethod
    def cpwg_line(cls, length, w, th, er, s, h, freqs=...): # -> Self@spfile:
        """Create an ``spfile`` object corresponding to a cpwg transmission line.

        Args:
            length (float): Length of cpwg line.
            w (float): Width of cpwg line.
            th (float): Thickness of metal.
            er (float): Relative permittivity of substrate.
            s (float): Gap of cpwg line.
            h (float): Thickness of substrate.
            freqs (float, optional): Frequency list of object. Defaults to None. If None, frequencies should be set later.

        Returns:
            spfile: An spfile object.
        """
        ...
    


if __name__ == '__main__':
    sptline = ...
    theta = ...
